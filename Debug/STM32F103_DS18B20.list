
STM32F103_DS18B20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001b34  08001b34  00011b34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001b54  08001b54  00011b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001b58  08001b58  00011b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000d0  2000000c  08001b68  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000dc  08001b68  000200dc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011f98  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000027c6  00000000  00000000  00031fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005333  00000000  00000000  00034793  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007e0  00000000  00000000  00039ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009d8  00000000  00000000  0003a2a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000047b7  00000000  00000000  0003ac80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002f6d  00000000  00000000  0003f437  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000423a4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001648  00000000  00000000  00042420  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001b1c 	.word	0x08001b1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001b1c 	.word	0x08001b1c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000608:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <HAL_InitTick+0x3c>)
{
 800060c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800060e:	7818      	ldrb	r0, [r3, #0]
 8000610:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000614:	fbb3 f3f0 	udiv	r3, r3, r0
 8000618:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_InitTick+0x40>)
 800061a:	6810      	ldr	r0, [r2, #0]
 800061c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000620:	f000 f89e 	bl	8000760 <HAL_SYSTICK_Config>
 8000624:	4604      	mov	r4, r0
 8000626:	b958      	cbnz	r0, 8000640 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000628:	2d0f      	cmp	r5, #15
 800062a:	d809      	bhi.n	8000640 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800062c:	4602      	mov	r2, r0
 800062e:	4629      	mov	r1, r5
 8000630:	f04f 30ff 	mov.w	r0, #4294967295
 8000634:	f000 f854 	bl	80006e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <HAL_InitTick+0x44>)
 800063a:	4620      	mov	r0, r4
 800063c:	601d      	str	r5, [r3, #0]
 800063e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000640:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000642:	bd38      	pop	{r3, r4, r5, pc}
 8000644:	20000000 	.word	0x20000000
 8000648:	20000008 	.word	0x20000008
 800064c:	20000004 	.word	0x20000004

08000650 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000650:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_Init+0x20>)
{
 8000652:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000654:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000656:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000658:	f043 0310 	orr.w	r3, r3, #16
 800065c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800065e:	f000 f82d 	bl	80006bc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000662:	2000      	movs	r0, #0
 8000664:	f7ff ffd0 	bl	8000608 <HAL_InitTick>
  HAL_MspInit();
 8000668:	f001 f95e 	bl	8001928 <HAL_MspInit>
}
 800066c:	2000      	movs	r0, #0
 800066e:	bd08      	pop	{r3, pc}
 8000670:	40022000 	.word	0x40022000

08000674 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000674:	4a03      	ldr	r2, [pc, #12]	; (8000684 <HAL_IncTick+0x10>)
 8000676:	4b04      	ldr	r3, [pc, #16]	; (8000688 <HAL_IncTick+0x14>)
 8000678:	6811      	ldr	r1, [r2, #0]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	440b      	add	r3, r1
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	2000002c 	.word	0x2000002c
 8000688:	20000000 	.word	0x20000000

0800068c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800068c:	4b01      	ldr	r3, [pc, #4]	; (8000694 <HAL_GetTick+0x8>)
 800068e:	6818      	ldr	r0, [r3, #0]
}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	2000002c 	.word	0x2000002c

08000698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000698:	b538      	push	{r3, r4, r5, lr}
 800069a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800069c:	f7ff fff6 	bl	800068c <HAL_GetTick>
 80006a0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006a2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80006a4:	bf1e      	ittt	ne
 80006a6:	4b04      	ldrne	r3, [pc, #16]	; (80006b8 <HAL_Delay+0x20>)
 80006a8:	781b      	ldrbne	r3, [r3, #0]
 80006aa:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006ac:	f7ff ffee 	bl	800068c <HAL_GetTick>
 80006b0:	1b40      	subs	r0, r0, r5
 80006b2:	4284      	cmp	r4, r0
 80006b4:	d8fa      	bhi.n	80006ac <HAL_Delay+0x14>
  {
  }
}
 80006b6:	bd38      	pop	{r3, r4, r5, pc}
 80006b8:	20000000 	.word	0x20000000

080006bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006bc:	4a07      	ldr	r2, [pc, #28]	; (80006dc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006be:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006c2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006ca:	041b      	lsls	r3, r3, #16
 80006cc:	0c1b      	lsrs	r3, r3, #16
 80006ce:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006d6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006d8:	60d3      	str	r3, [r2, #12]
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e0:	4b17      	ldr	r3, [pc, #92]	; (8000740 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	68dc      	ldr	r4, [r3, #12]
 80006e6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ea:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ee:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f0:	2b04      	cmp	r3, #4
 80006f2:	bf28      	it	cs
 80006f4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fc:	bf98      	it	ls
 80006fe:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	fa05 f303 	lsl.w	r3, r5, r3
 8000704:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000708:	bf88      	it	hi
 800070a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	4019      	ands	r1, r3
 800070e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000710:	fa05 f404 	lsl.w	r4, r5, r4
 8000714:	3c01      	subs	r4, #1
 8000716:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000718:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071a:	ea42 0201 	orr.w	r2, r2, r1
 800071e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	bfaf      	iteee	ge
 8000724:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000728:	4b06      	ldrlt	r3, [pc, #24]	; (8000744 <HAL_NVIC_SetPriority+0x64>)
 800072a:	f000 000f 	andlt.w	r0, r0, #15
 800072e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000730:	bfa5      	ittet	ge
 8000732:	b2d2      	uxtbge	r2, r2
 8000734:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000738:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	e000ed00 	.word	0xe000ed00
 8000744:	e000ed14 	.word	0xe000ed14

08000748 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000748:	2301      	movs	r3, #1
 800074a:	0942      	lsrs	r2, r0, #5
 800074c:	f000 001f 	and.w	r0, r0, #31
 8000750:	fa03 f000 	lsl.w	r0, r3, r0
 8000754:	4b01      	ldr	r3, [pc, #4]	; (800075c <HAL_NVIC_EnableIRQ+0x14>)
 8000756:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800075a:	4770      	bx	lr
 800075c:	e000e100 	.word	0xe000e100

08000760 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000760:	3801      	subs	r0, #1
 8000762:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000766:	d20a      	bcs.n	800077e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000768:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	4a06      	ldr	r2, [pc, #24]	; (8000788 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000770:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000776:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000778:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800077e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000e010 	.word	0xe000e010
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800078c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000790:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000792:	4616      	mov	r6, r2
 8000794:	4b65      	ldr	r3, [pc, #404]	; (800092c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000796:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800093c <HAL_GPIO_Init+0x1b0>
 800079a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000940 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800079e:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007a2:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80007a4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007a8:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80007ac:	45a0      	cmp	r8, r4
 80007ae:	d17f      	bne.n	80008b0 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80007b0:	684d      	ldr	r5, [r1, #4]
 80007b2:	2d12      	cmp	r5, #18
 80007b4:	f000 80af 	beq.w	8000916 <HAL_GPIO_Init+0x18a>
 80007b8:	f200 8088 	bhi.w	80008cc <HAL_GPIO_Init+0x140>
 80007bc:	2d02      	cmp	r5, #2
 80007be:	f000 80a7 	beq.w	8000910 <HAL_GPIO_Init+0x184>
 80007c2:	d87c      	bhi.n	80008be <HAL_GPIO_Init+0x132>
 80007c4:	2d00      	cmp	r5, #0
 80007c6:	f000 808e 	beq.w	80008e6 <HAL_GPIO_Init+0x15a>
 80007ca:	2d01      	cmp	r5, #1
 80007cc:	f000 809e 	beq.w	800090c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80007d0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007d4:	2cff      	cmp	r4, #255	; 0xff
 80007d6:	bf93      	iteet	ls
 80007d8:	4682      	movls	sl, r0
 80007da:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80007de:	3d08      	subhi	r5, #8
 80007e0:	f8d0 b000 	ldrls.w	fp, [r0]
 80007e4:	bf92      	itee	ls
 80007e6:	00b5      	lslls	r5, r6, #2
 80007e8:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80007ec:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80007ee:	fa09 f805 	lsl.w	r8, r9, r5
 80007f2:	ea2b 0808 	bic.w	r8, fp, r8
 80007f6:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007fa:	bf88      	it	hi
 80007fc:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000800:	ea48 0505 	orr.w	r5, r8, r5
 8000804:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000808:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800080c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000810:	d04e      	beq.n	80008b0 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000812:	4d47      	ldr	r5, [pc, #284]	; (8000930 <HAL_GPIO_Init+0x1a4>)
 8000814:	4f46      	ldr	r7, [pc, #280]	; (8000930 <HAL_GPIO_Init+0x1a4>)
 8000816:	69ad      	ldr	r5, [r5, #24]
 8000818:	f026 0803 	bic.w	r8, r6, #3
 800081c:	f045 0501 	orr.w	r5, r5, #1
 8000820:	61bd      	str	r5, [r7, #24]
 8000822:	69bd      	ldr	r5, [r7, #24]
 8000824:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000828:	f005 0501 	and.w	r5, r5, #1
 800082c:	9501      	str	r5, [sp, #4]
 800082e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000832:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000836:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000838:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800083c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000840:	fa09 f90b 	lsl.w	r9, r9, fp
 8000844:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000848:	4d3a      	ldr	r5, [pc, #232]	; (8000934 <HAL_GPIO_Init+0x1a8>)
 800084a:	42a8      	cmp	r0, r5
 800084c:	d068      	beq.n	8000920 <HAL_GPIO_Init+0x194>
 800084e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000852:	42a8      	cmp	r0, r5
 8000854:	d066      	beq.n	8000924 <HAL_GPIO_Init+0x198>
 8000856:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800085a:	42a8      	cmp	r0, r5
 800085c:	d064      	beq.n	8000928 <HAL_GPIO_Init+0x19c>
 800085e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000862:	42a8      	cmp	r0, r5
 8000864:	bf0c      	ite	eq
 8000866:	2503      	moveq	r5, #3
 8000868:	2504      	movne	r5, #4
 800086a:	fa05 f50b 	lsl.w	r5, r5, fp
 800086e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000872:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000876:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000878:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800087c:	bf14      	ite	ne
 800087e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000880:	43a5      	biceq	r5, r4
 8000882:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000884:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000886:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800088a:	bf14      	ite	ne
 800088c:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800088e:	43a5      	biceq	r5, r4
 8000890:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000892:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000894:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000898:	bf14      	ite	ne
 800089a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800089c:	43a5      	biceq	r5, r4
 800089e:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80008a0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008a2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80008a6:	bf14      	ite	ne
 80008a8:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80008aa:	ea25 0404 	biceq.w	r4, r5, r4
 80008ae:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80008b0:	3601      	adds	r6, #1
 80008b2:	2e10      	cmp	r6, #16
 80008b4:	f47f af73 	bne.w	800079e <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80008b8:	b003      	add	sp, #12
 80008ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80008be:	2d03      	cmp	r5, #3
 80008c0:	d022      	beq.n	8000908 <HAL_GPIO_Init+0x17c>
 80008c2:	2d11      	cmp	r5, #17
 80008c4:	d184      	bne.n	80007d0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008c6:	68ca      	ldr	r2, [r1, #12]
 80008c8:	3204      	adds	r2, #4
          break;
 80008ca:	e781      	b.n	80007d0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80008cc:	4f1a      	ldr	r7, [pc, #104]	; (8000938 <HAL_GPIO_Init+0x1ac>)
 80008ce:	42bd      	cmp	r5, r7
 80008d0:	d009      	beq.n	80008e6 <HAL_GPIO_Init+0x15a>
 80008d2:	d812      	bhi.n	80008fa <HAL_GPIO_Init+0x16e>
 80008d4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000944 <HAL_GPIO_Init+0x1b8>
 80008d8:	454d      	cmp	r5, r9
 80008da:	d004      	beq.n	80008e6 <HAL_GPIO_Init+0x15a>
 80008dc:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80008e0:	454d      	cmp	r5, r9
 80008e2:	f47f af75 	bne.w	80007d0 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008e6:	688a      	ldr	r2, [r1, #8]
 80008e8:	b1c2      	cbz	r2, 800091c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008ea:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80008ec:	bf0c      	ite	eq
 80008ee:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80008f2:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008f6:	2208      	movs	r2, #8
 80008f8:	e76a      	b.n	80007d0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80008fa:	4575      	cmp	r5, lr
 80008fc:	d0f3      	beq.n	80008e6 <HAL_GPIO_Init+0x15a>
 80008fe:	4565      	cmp	r5, ip
 8000900:	d0f1      	beq.n	80008e6 <HAL_GPIO_Init+0x15a>
 8000902:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000948 <HAL_GPIO_Init+0x1bc>
 8000906:	e7eb      	b.n	80008e0 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000908:	2200      	movs	r2, #0
 800090a:	e761      	b.n	80007d0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800090c:	68ca      	ldr	r2, [r1, #12]
          break;
 800090e:	e75f      	b.n	80007d0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000910:	68ca      	ldr	r2, [r1, #12]
 8000912:	3208      	adds	r2, #8
          break;
 8000914:	e75c      	b.n	80007d0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000916:	68ca      	ldr	r2, [r1, #12]
 8000918:	320c      	adds	r2, #12
          break;
 800091a:	e759      	b.n	80007d0 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800091c:	2204      	movs	r2, #4
 800091e:	e757      	b.n	80007d0 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000920:	2500      	movs	r5, #0
 8000922:	e7a2      	b.n	800086a <HAL_GPIO_Init+0xde>
 8000924:	2501      	movs	r5, #1
 8000926:	e7a0      	b.n	800086a <HAL_GPIO_Init+0xde>
 8000928:	2502      	movs	r5, #2
 800092a:	e79e      	b.n	800086a <HAL_GPIO_Init+0xde>
 800092c:	40010400 	.word	0x40010400
 8000930:	40021000 	.word	0x40021000
 8000934:	40010800 	.word	0x40010800
 8000938:	10210000 	.word	0x10210000
 800093c:	10310000 	.word	0x10310000
 8000940:	10320000 	.word	0x10320000
 8000944:	10110000 	.word	0x10110000
 8000948:	10220000 	.word	0x10220000

0800094c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800094c:	6883      	ldr	r3, [r0, #8]
 800094e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000950:	bf14      	ite	ne
 8000952:	2001      	movne	r0, #1
 8000954:	2000      	moveq	r0, #0
 8000956:	4770      	bx	lr

08000958 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000958:	b10a      	cbz	r2, 800095e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800095a:	6101      	str	r1, [r0, #16]
 800095c:	4770      	bx	lr
 800095e:	0409      	lsls	r1, r1, #16
 8000960:	e7fb      	b.n	800095a <HAL_GPIO_WritePin+0x2>

08000962 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000962:	68c3      	ldr	r3, [r0, #12]
 8000964:	4059      	eors	r1, r3
 8000966:	60c1      	str	r1, [r0, #12]
 8000968:	4770      	bx	lr
	...

0800096c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800096c:	6803      	ldr	r3, [r0, #0]
{
 800096e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000972:	07db      	lsls	r3, r3, #31
{
 8000974:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000976:	d410      	bmi.n	800099a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000978:	682b      	ldr	r3, [r5, #0]
 800097a:	079f      	lsls	r7, r3, #30
 800097c:	d45e      	bmi.n	8000a3c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800097e:	682b      	ldr	r3, [r5, #0]
 8000980:	0719      	lsls	r1, r3, #28
 8000982:	f100 8095 	bmi.w	8000ab0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000986:	682b      	ldr	r3, [r5, #0]
 8000988:	075a      	lsls	r2, r3, #29
 800098a:	f100 80bf 	bmi.w	8000b0c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800098e:	69ea      	ldr	r2, [r5, #28]
 8000990:	2a00      	cmp	r2, #0
 8000992:	f040 812d 	bne.w	8000bf0 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000996:	2000      	movs	r0, #0
 8000998:	e014      	b.n	80009c4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800099a:	4c90      	ldr	r4, [pc, #576]	; (8000bdc <HAL_RCC_OscConfig+0x270>)
 800099c:	6863      	ldr	r3, [r4, #4]
 800099e:	f003 030c 	and.w	r3, r3, #12
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	d007      	beq.n	80009b6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009a6:	6863      	ldr	r3, [r4, #4]
 80009a8:	f003 030c 	and.w	r3, r3, #12
 80009ac:	2b08      	cmp	r3, #8
 80009ae:	d10c      	bne.n	80009ca <HAL_RCC_OscConfig+0x5e>
 80009b0:	6863      	ldr	r3, [r4, #4]
 80009b2:	03de      	lsls	r6, r3, #15
 80009b4:	d509      	bpl.n	80009ca <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009b6:	6823      	ldr	r3, [r4, #0]
 80009b8:	039c      	lsls	r4, r3, #14
 80009ba:	d5dd      	bpl.n	8000978 <HAL_RCC_OscConfig+0xc>
 80009bc:	686b      	ldr	r3, [r5, #4]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d1da      	bne.n	8000978 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80009c2:	2001      	movs	r0, #1
}
 80009c4:	b002      	add	sp, #8
 80009c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009ca:	686b      	ldr	r3, [r5, #4]
 80009cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009d0:	d110      	bne.n	80009f4 <HAL_RCC_OscConfig+0x88>
 80009d2:	6823      	ldr	r3, [r4, #0]
 80009d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009d8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009da:	f7ff fe57 	bl	800068c <HAL_GetTick>
 80009de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009e0:	6823      	ldr	r3, [r4, #0]
 80009e2:	0398      	lsls	r0, r3, #14
 80009e4:	d4c8      	bmi.n	8000978 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009e6:	f7ff fe51 	bl	800068c <HAL_GetTick>
 80009ea:	1b80      	subs	r0, r0, r6
 80009ec:	2864      	cmp	r0, #100	; 0x64
 80009ee:	d9f7      	bls.n	80009e0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80009f0:	2003      	movs	r0, #3
 80009f2:	e7e7      	b.n	80009c4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009f4:	b99b      	cbnz	r3, 8000a1e <HAL_RCC_OscConfig+0xb2>
 80009f6:	6823      	ldr	r3, [r4, #0]
 80009f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009fc:	6023      	str	r3, [r4, #0]
 80009fe:	6823      	ldr	r3, [r4, #0]
 8000a00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a04:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a06:	f7ff fe41 	bl	800068c <HAL_GetTick>
 8000a0a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a0c:	6823      	ldr	r3, [r4, #0]
 8000a0e:	0399      	lsls	r1, r3, #14
 8000a10:	d5b2      	bpl.n	8000978 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a12:	f7ff fe3b 	bl	800068c <HAL_GetTick>
 8000a16:	1b80      	subs	r0, r0, r6
 8000a18:	2864      	cmp	r0, #100	; 0x64
 8000a1a:	d9f7      	bls.n	8000a0c <HAL_RCC_OscConfig+0xa0>
 8000a1c:	e7e8      	b.n	80009f0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a22:	6823      	ldr	r3, [r4, #0]
 8000a24:	d103      	bne.n	8000a2e <HAL_RCC_OscConfig+0xc2>
 8000a26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a2a:	6023      	str	r3, [r4, #0]
 8000a2c:	e7d1      	b.n	80009d2 <HAL_RCC_OscConfig+0x66>
 8000a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a32:	6023      	str	r3, [r4, #0]
 8000a34:	6823      	ldr	r3, [r4, #0]
 8000a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a3a:	e7cd      	b.n	80009d8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a3c:	4c67      	ldr	r4, [pc, #412]	; (8000bdc <HAL_RCC_OscConfig+0x270>)
 8000a3e:	6863      	ldr	r3, [r4, #4]
 8000a40:	f013 0f0c 	tst.w	r3, #12
 8000a44:	d007      	beq.n	8000a56 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000a46:	6863      	ldr	r3, [r4, #4]
 8000a48:	f003 030c 	and.w	r3, r3, #12
 8000a4c:	2b08      	cmp	r3, #8
 8000a4e:	d110      	bne.n	8000a72 <HAL_RCC_OscConfig+0x106>
 8000a50:	6863      	ldr	r3, [r4, #4]
 8000a52:	03da      	lsls	r2, r3, #15
 8000a54:	d40d      	bmi.n	8000a72 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a56:	6823      	ldr	r3, [r4, #0]
 8000a58:	079b      	lsls	r3, r3, #30
 8000a5a:	d502      	bpl.n	8000a62 <HAL_RCC_OscConfig+0xf6>
 8000a5c:	692b      	ldr	r3, [r5, #16]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d1af      	bne.n	80009c2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a62:	6823      	ldr	r3, [r4, #0]
 8000a64:	696a      	ldr	r2, [r5, #20]
 8000a66:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a6a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a6e:	6023      	str	r3, [r4, #0]
 8000a70:	e785      	b.n	800097e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a72:	692a      	ldr	r2, [r5, #16]
 8000a74:	4b5a      	ldr	r3, [pc, #360]	; (8000be0 <HAL_RCC_OscConfig+0x274>)
 8000a76:	b16a      	cbz	r2, 8000a94 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000a78:	2201      	movs	r2, #1
 8000a7a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a7c:	f7ff fe06 	bl	800068c <HAL_GetTick>
 8000a80:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a82:	6823      	ldr	r3, [r4, #0]
 8000a84:	079f      	lsls	r7, r3, #30
 8000a86:	d4ec      	bmi.n	8000a62 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a88:	f7ff fe00 	bl	800068c <HAL_GetTick>
 8000a8c:	1b80      	subs	r0, r0, r6
 8000a8e:	2802      	cmp	r0, #2
 8000a90:	d9f7      	bls.n	8000a82 <HAL_RCC_OscConfig+0x116>
 8000a92:	e7ad      	b.n	80009f0 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000a94:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a96:	f7ff fdf9 	bl	800068c <HAL_GetTick>
 8000a9a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a9c:	6823      	ldr	r3, [r4, #0]
 8000a9e:	0798      	lsls	r0, r3, #30
 8000aa0:	f57f af6d 	bpl.w	800097e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aa4:	f7ff fdf2 	bl	800068c <HAL_GetTick>
 8000aa8:	1b80      	subs	r0, r0, r6
 8000aaa:	2802      	cmp	r0, #2
 8000aac:	d9f6      	bls.n	8000a9c <HAL_RCC_OscConfig+0x130>
 8000aae:	e79f      	b.n	80009f0 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ab0:	69aa      	ldr	r2, [r5, #24]
 8000ab2:	4c4a      	ldr	r4, [pc, #296]	; (8000bdc <HAL_RCC_OscConfig+0x270>)
 8000ab4:	4b4b      	ldr	r3, [pc, #300]	; (8000be4 <HAL_RCC_OscConfig+0x278>)
 8000ab6:	b1da      	cbz	r2, 8000af0 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000ab8:	2201      	movs	r2, #1
 8000aba:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000abc:	f7ff fde6 	bl	800068c <HAL_GetTick>
 8000ac0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ac4:	079b      	lsls	r3, r3, #30
 8000ac6:	d50d      	bpl.n	8000ae4 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ac8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000acc:	4b46      	ldr	r3, [pc, #280]	; (8000be8 <HAL_RCC_OscConfig+0x27c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ad4:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000ad6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000ad8:	9b01      	ldr	r3, [sp, #4]
 8000ada:	1e5a      	subs	r2, r3, #1
 8000adc:	9201      	str	r2, [sp, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d1f9      	bne.n	8000ad6 <HAL_RCC_OscConfig+0x16a>
 8000ae2:	e750      	b.n	8000986 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ae4:	f7ff fdd2 	bl	800068c <HAL_GetTick>
 8000ae8:	1b80      	subs	r0, r0, r6
 8000aea:	2802      	cmp	r0, #2
 8000aec:	d9e9      	bls.n	8000ac2 <HAL_RCC_OscConfig+0x156>
 8000aee:	e77f      	b.n	80009f0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000af0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000af2:	f7ff fdcb 	bl	800068c <HAL_GetTick>
 8000af6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000af8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000afa:	079f      	lsls	r7, r3, #30
 8000afc:	f57f af43 	bpl.w	8000986 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b00:	f7ff fdc4 	bl	800068c <HAL_GetTick>
 8000b04:	1b80      	subs	r0, r0, r6
 8000b06:	2802      	cmp	r0, #2
 8000b08:	d9f6      	bls.n	8000af8 <HAL_RCC_OscConfig+0x18c>
 8000b0a:	e771      	b.n	80009f0 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b0c:	4c33      	ldr	r4, [pc, #204]	; (8000bdc <HAL_RCC_OscConfig+0x270>)
 8000b0e:	69e3      	ldr	r3, [r4, #28]
 8000b10:	00d8      	lsls	r0, r3, #3
 8000b12:	d424      	bmi.n	8000b5e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000b14:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	69e3      	ldr	r3, [r4, #28]
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	61e3      	str	r3, [r4, #28]
 8000b1e:	69e3      	ldr	r3, [r4, #28]
 8000b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b28:	4e30      	ldr	r6, [pc, #192]	; (8000bec <HAL_RCC_OscConfig+0x280>)
 8000b2a:	6833      	ldr	r3, [r6, #0]
 8000b2c:	05d9      	lsls	r1, r3, #23
 8000b2e:	d518      	bpl.n	8000b62 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b30:	68eb      	ldr	r3, [r5, #12]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d126      	bne.n	8000b84 <HAL_RCC_OscConfig+0x218>
 8000b36:	6a23      	ldr	r3, [r4, #32]
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000b3e:	f7ff fda5 	bl	800068c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b42:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b46:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b48:	6a23      	ldr	r3, [r4, #32]
 8000b4a:	079b      	lsls	r3, r3, #30
 8000b4c:	d53f      	bpl.n	8000bce <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000b4e:	2f00      	cmp	r7, #0
 8000b50:	f43f af1d 	beq.w	800098e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b54:	69e3      	ldr	r3, [r4, #28]
 8000b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	61e3      	str	r3, [r4, #28]
 8000b5c:	e717      	b.n	800098e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000b5e:	2700      	movs	r7, #0
 8000b60:	e7e2      	b.n	8000b28 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b62:	6833      	ldr	r3, [r6, #0]
 8000b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b68:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000b6a:	f7ff fd8f 	bl	800068c <HAL_GetTick>
 8000b6e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b70:	6833      	ldr	r3, [r6, #0]
 8000b72:	05da      	lsls	r2, r3, #23
 8000b74:	d4dc      	bmi.n	8000b30 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b76:	f7ff fd89 	bl	800068c <HAL_GetTick>
 8000b7a:	eba0 0008 	sub.w	r0, r0, r8
 8000b7e:	2864      	cmp	r0, #100	; 0x64
 8000b80:	d9f6      	bls.n	8000b70 <HAL_RCC_OscConfig+0x204>
 8000b82:	e735      	b.n	80009f0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b84:	b9ab      	cbnz	r3, 8000bb2 <HAL_RCC_OscConfig+0x246>
 8000b86:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b88:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b8c:	f023 0301 	bic.w	r3, r3, #1
 8000b90:	6223      	str	r3, [r4, #32]
 8000b92:	6a23      	ldr	r3, [r4, #32]
 8000b94:	f023 0304 	bic.w	r3, r3, #4
 8000b98:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000b9a:	f7ff fd77 	bl	800068c <HAL_GetTick>
 8000b9e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ba0:	6a23      	ldr	r3, [r4, #32]
 8000ba2:	0798      	lsls	r0, r3, #30
 8000ba4:	d5d3      	bpl.n	8000b4e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ba6:	f7ff fd71 	bl	800068c <HAL_GetTick>
 8000baa:	1b80      	subs	r0, r0, r6
 8000bac:	4540      	cmp	r0, r8
 8000bae:	d9f7      	bls.n	8000ba0 <HAL_RCC_OscConfig+0x234>
 8000bb0:	e71e      	b.n	80009f0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bb2:	2b05      	cmp	r3, #5
 8000bb4:	6a23      	ldr	r3, [r4, #32]
 8000bb6:	d103      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x254>
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	6223      	str	r3, [r4, #32]
 8000bbe:	e7ba      	b.n	8000b36 <HAL_RCC_OscConfig+0x1ca>
 8000bc0:	f023 0301 	bic.w	r3, r3, #1
 8000bc4:	6223      	str	r3, [r4, #32]
 8000bc6:	6a23      	ldr	r3, [r4, #32]
 8000bc8:	f023 0304 	bic.w	r3, r3, #4
 8000bcc:	e7b6      	b.n	8000b3c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bce:	f7ff fd5d 	bl	800068c <HAL_GetTick>
 8000bd2:	eba0 0008 	sub.w	r0, r0, r8
 8000bd6:	42b0      	cmp	r0, r6
 8000bd8:	d9b6      	bls.n	8000b48 <HAL_RCC_OscConfig+0x1dc>
 8000bda:	e709      	b.n	80009f0 <HAL_RCC_OscConfig+0x84>
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	42420000 	.word	0x42420000
 8000be4:	42420480 	.word	0x42420480
 8000be8:	20000008 	.word	0x20000008
 8000bec:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bf0:	4c22      	ldr	r4, [pc, #136]	; (8000c7c <HAL_RCC_OscConfig+0x310>)
 8000bf2:	6863      	ldr	r3, [r4, #4]
 8000bf4:	f003 030c 	and.w	r3, r3, #12
 8000bf8:	2b08      	cmp	r3, #8
 8000bfa:	f43f aee2 	beq.w	80009c2 <HAL_RCC_OscConfig+0x56>
 8000bfe:	2300      	movs	r3, #0
 8000c00:	4e1f      	ldr	r6, [pc, #124]	; (8000c80 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c02:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000c04:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c06:	d12b      	bne.n	8000c60 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000c08:	f7ff fd40 	bl	800068c <HAL_GetTick>
 8000c0c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c0e:	6823      	ldr	r3, [r4, #0]
 8000c10:	0199      	lsls	r1, r3, #6
 8000c12:	d41f      	bmi.n	8000c54 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c14:	6a2b      	ldr	r3, [r5, #32]
 8000c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c1a:	d105      	bne.n	8000c28 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c1c:	6862      	ldr	r2, [r4, #4]
 8000c1e:	68a9      	ldr	r1, [r5, #8]
 8000c20:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000c24:	430a      	orrs	r2, r1
 8000c26:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c28:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000c2a:	6862      	ldr	r2, [r4, #4]
 8000c2c:	430b      	orrs	r3, r1
 8000c2e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000c32:	4313      	orrs	r3, r2
 8000c34:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000c36:	2301      	movs	r3, #1
 8000c38:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000c3a:	f7ff fd27 	bl	800068c <HAL_GetTick>
 8000c3e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c40:	6823      	ldr	r3, [r4, #0]
 8000c42:	019a      	lsls	r2, r3, #6
 8000c44:	f53f aea7 	bmi.w	8000996 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c48:	f7ff fd20 	bl	800068c <HAL_GetTick>
 8000c4c:	1b40      	subs	r0, r0, r5
 8000c4e:	2802      	cmp	r0, #2
 8000c50:	d9f6      	bls.n	8000c40 <HAL_RCC_OscConfig+0x2d4>
 8000c52:	e6cd      	b.n	80009f0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c54:	f7ff fd1a 	bl	800068c <HAL_GetTick>
 8000c58:	1bc0      	subs	r0, r0, r7
 8000c5a:	2802      	cmp	r0, #2
 8000c5c:	d9d7      	bls.n	8000c0e <HAL_RCC_OscConfig+0x2a2>
 8000c5e:	e6c7      	b.n	80009f0 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000c60:	f7ff fd14 	bl	800068c <HAL_GetTick>
 8000c64:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c66:	6823      	ldr	r3, [r4, #0]
 8000c68:	019b      	lsls	r3, r3, #6
 8000c6a:	f57f ae94 	bpl.w	8000996 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c6e:	f7ff fd0d 	bl	800068c <HAL_GetTick>
 8000c72:	1b40      	subs	r0, r0, r5
 8000c74:	2802      	cmp	r0, #2
 8000c76:	d9f6      	bls.n	8000c66 <HAL_RCC_OscConfig+0x2fa>
 8000c78:	e6ba      	b.n	80009f0 <HAL_RCC_OscConfig+0x84>
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	42420060 	.word	0x42420060

08000c84 <HAL_RCC_GetSysClockFreq>:
{
 8000c84:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000c88:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000c8a:	ac02      	add	r4, sp, #8
 8000c8c:	f103 0510 	add.w	r5, r3, #16
 8000c90:	4622      	mov	r2, r4
 8000c92:	6818      	ldr	r0, [r3, #0]
 8000c94:	6859      	ldr	r1, [r3, #4]
 8000c96:	3308      	adds	r3, #8
 8000c98:	c203      	stmia	r2!, {r0, r1}
 8000c9a:	42ab      	cmp	r3, r5
 8000c9c:	4614      	mov	r4, r2
 8000c9e:	d1f7      	bne.n	8000c90 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	f88d 3004 	strb.w	r3, [sp, #4]
 8000ca6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000ca8:	4911      	ldr	r1, [pc, #68]	; (8000cf0 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000caa:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000cae:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000cb0:	f003 020c 	and.w	r2, r3, #12
 8000cb4:	2a08      	cmp	r2, #8
 8000cb6:	d117      	bne.n	8000ce8 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000cb8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000cbc:	a806      	add	r0, sp, #24
 8000cbe:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000cc0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000cc2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000cc6:	d50c      	bpl.n	8000ce2 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000cc8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000cca:	480a      	ldr	r0, [pc, #40]	; (8000cf4 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ccc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000cd0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000cd2:	aa06      	add	r2, sp, #24
 8000cd4:	4413      	add	r3, r2
 8000cd6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000cda:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000cde:	b007      	add	sp, #28
 8000ce0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <HAL_RCC_GetSysClockFreq+0x74>)
 8000ce4:	4350      	muls	r0, r2
 8000ce6:	e7fa      	b.n	8000cde <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000cea:	e7f8      	b.n	8000cde <HAL_RCC_GetSysClockFreq+0x5a>
 8000cec:	08001b34 	.word	0x08001b34
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	007a1200 	.word	0x007a1200
 8000cf8:	003d0900 	.word	0x003d0900

08000cfc <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cfc:	4a54      	ldr	r2, [pc, #336]	; (8000e50 <HAL_RCC_ClockConfig+0x154>)
{
 8000cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d02:	6813      	ldr	r3, [r2, #0]
{
 8000d04:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	428b      	cmp	r3, r1
{
 8000d0c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d0e:	d32a      	bcc.n	8000d66 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d10:	6829      	ldr	r1, [r5, #0]
 8000d12:	078c      	lsls	r4, r1, #30
 8000d14:	d434      	bmi.n	8000d80 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d16:	07ca      	lsls	r2, r1, #31
 8000d18:	d447      	bmi.n	8000daa <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d1a:	4a4d      	ldr	r2, [pc, #308]	; (8000e50 <HAL_RCC_ClockConfig+0x154>)
 8000d1c:	6813      	ldr	r3, [r2, #0]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f0c0 8082 	bcc.w	8000e2c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d28:	682a      	ldr	r2, [r5, #0]
 8000d2a:	4c4a      	ldr	r4, [pc, #296]	; (8000e54 <HAL_RCC_ClockConfig+0x158>)
 8000d2c:	f012 0f04 	tst.w	r2, #4
 8000d30:	f040 8087 	bne.w	8000e42 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d34:	0713      	lsls	r3, r2, #28
 8000d36:	d506      	bpl.n	8000d46 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d38:	6863      	ldr	r3, [r4, #4]
 8000d3a:	692a      	ldr	r2, [r5, #16]
 8000d3c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000d40:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d44:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d46:	f7ff ff9d 	bl	8000c84 <HAL_RCC_GetSysClockFreq>
 8000d4a:	6863      	ldr	r3, [r4, #4]
 8000d4c:	4a42      	ldr	r2, [pc, #264]	; (8000e58 <HAL_RCC_ClockConfig+0x15c>)
 8000d4e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d52:	5cd3      	ldrb	r3, [r2, r3]
 8000d54:	40d8      	lsrs	r0, r3
 8000d56:	4b41      	ldr	r3, [pc, #260]	; (8000e5c <HAL_RCC_ClockConfig+0x160>)
 8000d58:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f7ff fc54 	bl	8000608 <HAL_InitTick>
  return HAL_OK;
 8000d60:	2000      	movs	r0, #0
}
 8000d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d66:	6813      	ldr	r3, [r2, #0]
 8000d68:	f023 0307 	bic.w	r3, r3, #7
 8000d6c:	430b      	orrs	r3, r1
 8000d6e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d70:	6813      	ldr	r3, [r2, #0]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	4299      	cmp	r1, r3
 8000d78:	d0ca      	beq.n	8000d10 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d80:	4b34      	ldr	r3, [pc, #208]	; (8000e54 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d82:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d86:	bf1e      	ittt	ne
 8000d88:	685a      	ldrne	r2, [r3, #4]
 8000d8a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000d8e:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d90:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d92:	bf42      	ittt	mi
 8000d94:	685a      	ldrmi	r2, [r3, #4]
 8000d96:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000d9a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	68a8      	ldr	r0, [r5, #8]
 8000da0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000da4:	4302      	orrs	r2, r0
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	e7b5      	b.n	8000d16 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000daa:	686a      	ldr	r2, [r5, #4]
 8000dac:	4c29      	ldr	r4, [pc, #164]	; (8000e54 <HAL_RCC_ClockConfig+0x158>)
 8000dae:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db0:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000db2:	d11c      	bne.n	8000dee <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db8:	d0df      	beq.n	8000d7a <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dba:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dbc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dc0:	f023 0303 	bic.w	r3, r3, #3
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000dc8:	f7ff fc60 	bl	800068c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dcc:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000dce:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d114      	bne.n	8000dfe <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dd4:	6863      	ldr	r3, [r4, #4]
 8000dd6:	f003 030c 	and.w	r3, r3, #12
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	d09d      	beq.n	8000d1a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dde:	f7ff fc55 	bl	800068c <HAL_GetTick>
 8000de2:	1bc0      	subs	r0, r0, r7
 8000de4:	4540      	cmp	r0, r8
 8000de6:	d9f5      	bls.n	8000dd4 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000de8:	2003      	movs	r0, #3
 8000dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dee:	2a02      	cmp	r2, #2
 8000df0:	d102      	bne.n	8000df8 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000df2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000df6:	e7df      	b.n	8000db8 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df8:	f013 0f02 	tst.w	r3, #2
 8000dfc:	e7dc      	b.n	8000db8 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d10f      	bne.n	8000e22 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e02:	6863      	ldr	r3, [r4, #4]
 8000e04:	f003 030c 	and.w	r3, r3, #12
 8000e08:	2b08      	cmp	r3, #8
 8000e0a:	d086      	beq.n	8000d1a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e0c:	f7ff fc3e 	bl	800068c <HAL_GetTick>
 8000e10:	1bc0      	subs	r0, r0, r7
 8000e12:	4540      	cmp	r0, r8
 8000e14:	d9f5      	bls.n	8000e02 <HAL_RCC_ClockConfig+0x106>
 8000e16:	e7e7      	b.n	8000de8 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e18:	f7ff fc38 	bl	800068c <HAL_GetTick>
 8000e1c:	1bc0      	subs	r0, r0, r7
 8000e1e:	4540      	cmp	r0, r8
 8000e20:	d8e2      	bhi.n	8000de8 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e22:	6863      	ldr	r3, [r4, #4]
 8000e24:	f013 0f0c 	tst.w	r3, #12
 8000e28:	d1f6      	bne.n	8000e18 <HAL_RCC_ClockConfig+0x11c>
 8000e2a:	e776      	b.n	8000d1a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e2c:	6813      	ldr	r3, [r2, #0]
 8000e2e:	f023 0307 	bic.w	r3, r3, #7
 8000e32:	4333      	orrs	r3, r6
 8000e34:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e36:	6813      	ldr	r3, [r2, #0]
 8000e38:	f003 0307 	and.w	r3, r3, #7
 8000e3c:	429e      	cmp	r6, r3
 8000e3e:	d19c      	bne.n	8000d7a <HAL_RCC_ClockConfig+0x7e>
 8000e40:	e772      	b.n	8000d28 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e42:	6863      	ldr	r3, [r4, #4]
 8000e44:	68e9      	ldr	r1, [r5, #12]
 8000e46:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e4a:	430b      	orrs	r3, r1
 8000e4c:	6063      	str	r3, [r4, #4]
 8000e4e:	e771      	b.n	8000d34 <HAL_RCC_ClockConfig+0x38>
 8000e50:	40022000 	.word	0x40022000
 8000e54:	40021000 	.word	0x40021000
 8000e58:	08001b44 	.word	0x08001b44
 8000e5c:	20000008 	.word	0x20000008

08000e60 <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8000e60:	2302      	movs	r3, #2

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000e62:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000e64:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 8000e68:	6813      	ldr	r3, [r2, #0]
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	6013      	str	r3, [r2, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8000e70:	2301      	movs	r3, #1
 8000e72:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8000e76:	2000      	movs	r0, #0
 8000e78:	4770      	bx	lr

08000e7a <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000e7a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000e7e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	f04f 0302 	mov.w	r3, #2
 8000e86:	d01c      	beq.n	8000ec2 <HAL_TIM_ConfigClockSource+0x48>
 8000e88:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 8000e8a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000e8e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000e90:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8000e94:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e96:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000e9a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000e9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8000ea0:	680a      	ldr	r2, [r1, #0]
 8000ea2:	2a40      	cmp	r2, #64	; 0x40
 8000ea4:	d079      	beq.n	8000f9a <HAL_TIM_ConfigClockSource+0x120>
 8000ea6:	d819      	bhi.n	8000edc <HAL_TIM_ConfigClockSource+0x62>
 8000ea8:	2a10      	cmp	r2, #16
 8000eaa:	f000 8093 	beq.w	8000fd4 <HAL_TIM_ConfigClockSource+0x15a>
 8000eae:	d80a      	bhi.n	8000ec6 <HAL_TIM_ConfigClockSource+0x4c>
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	f000 8089 	beq.w	8000fc8 <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000ec2:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000ec4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000ec6:	2a20      	cmp	r2, #32
 8000ec8:	f000 808a 	beq.w	8000fe0 <HAL_TIM_ConfigClockSource+0x166>
 8000ecc:	2a30      	cmp	r2, #48	; 0x30
 8000ece:	d1f2      	bne.n	8000eb6 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000ed0:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ed2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ed6:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000eda:	e036      	b.n	8000f4a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000edc:	2a70      	cmp	r2, #112	; 0x70
 8000ede:	d036      	beq.n	8000f4e <HAL_TIM_ConfigClockSource+0xd4>
 8000ee0:	d81b      	bhi.n	8000f1a <HAL_TIM_ConfigClockSource+0xa0>
 8000ee2:	2a50      	cmp	r2, #80	; 0x50
 8000ee4:	d042      	beq.n	8000f6c <HAL_TIM_ConfigClockSource+0xf2>
 8000ee6:	2a60      	cmp	r2, #96	; 0x60
 8000ee8:	d1e5      	bne.n	8000eb6 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000eea:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000eec:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000eee:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000ef2:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ef4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000ef6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000ef8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000efa:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000efe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000f02:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000f06:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000f0a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000f0c:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000f0e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f14:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000f18:	e017      	b.n	8000f4a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000f1a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000f1e:	d011      	beq.n	8000f44 <HAL_TIM_ConfigClockSource+0xca>
 8000f20:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000f24:	d1c7      	bne.n	8000eb6 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000f26:	688a      	ldr	r2, [r1, #8]
 8000f28:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000f2a:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000f2c:	68c9      	ldr	r1, [r1, #12]
 8000f2e:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000f30:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000f34:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000f38:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000f3a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f42:	e002      	b.n	8000f4a <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000f44:	689a      	ldr	r2, [r3, #8]
 8000f46:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	e7b3      	b.n	8000eb6 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000f4e:	688a      	ldr	r2, [r1, #8]
 8000f50:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000f52:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000f54:	68c9      	ldr	r1, [r1, #12]
 8000f56:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000f58:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000f5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000f60:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000f62:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000f64:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000f66:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000f6a:	e7ee      	b.n	8000f4a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000f6c:	684c      	ldr	r4, [r1, #4]
 8000f6e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000f70:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f72:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000f74:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f78:	f025 0501 	bic.w	r5, r5, #1
 8000f7c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f7e:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000f80:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f82:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000f86:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000f8c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000f8e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f94:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000f98:	e7d7      	b.n	8000f4a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000f9a:	684c      	ldr	r4, [r1, #4]
 8000f9c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000f9e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000fa0:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000fa2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000fa6:	f025 0501 	bic.w	r5, r5, #1
 8000faa:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000fac:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000fae:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000fb0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000fb4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000fb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000fba:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000fbc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000fbe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000fc2:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000fc6:	e7c0      	b.n	8000f4a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000fc8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000fca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000fce:	f042 0207 	orr.w	r2, r2, #7
 8000fd2:	e7ba      	b.n	8000f4a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000fd4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000fd6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000fda:	f042 0217 	orr.w	r2, r2, #23
 8000fde:	e7b4      	b.n	8000f4a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000fe0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000fe2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000fe6:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000fea:	e7ae      	b.n	8000f4a <HAL_TIM_ConfigClockSource+0xd0>

08000fec <HAL_TIM_OC_DelayElapsedCallback>:
 8000fec:	4770      	bx	lr

08000fee <HAL_TIM_IC_CaptureCallback>:
 8000fee:	4770      	bx	lr

08000ff0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000ff0:	4770      	bx	lr

08000ff2 <HAL_TIM_TriggerCallback>:
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000ff4:	6803      	ldr	r3, [r0, #0]
{
 8000ff6:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000ff8:	691a      	ldr	r2, [r3, #16]
{
 8000ffa:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000ffc:	0791      	lsls	r1, r2, #30
 8000ffe:	d50e      	bpl.n	800101e <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001000:	68da      	ldr	r2, [r3, #12]
 8001002:	0792      	lsls	r2, r2, #30
 8001004:	d50b      	bpl.n	800101e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001006:	f06f 0202 	mvn.w	r2, #2
 800100a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800100c:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800100e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001010:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001012:	079b      	lsls	r3, r3, #30
 8001014:	d077      	beq.n	8001106 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001016:	f7ff ffea 	bl	8000fee <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800101a:	2300      	movs	r3, #0
 800101c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	691a      	ldr	r2, [r3, #16]
 8001022:	0750      	lsls	r0, r2, #29
 8001024:	d510      	bpl.n	8001048 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	0751      	lsls	r1, r2, #29
 800102a:	d50d      	bpl.n	8001048 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800102c:	f06f 0204 	mvn.w	r2, #4
 8001030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001032:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001034:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001036:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001038:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800103c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800103e:	d068      	beq.n	8001112 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001040:	f7ff ffd5 	bl	8000fee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001044:	2300      	movs	r3, #0
 8001046:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001048:	6823      	ldr	r3, [r4, #0]
 800104a:	691a      	ldr	r2, [r3, #16]
 800104c:	0712      	lsls	r2, r2, #28
 800104e:	d50f      	bpl.n	8001070 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	0710      	lsls	r0, r2, #28
 8001054:	d50c      	bpl.n	8001070 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001056:	f06f 0208 	mvn.w	r2, #8
 800105a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800105c:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800105e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001060:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001062:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001064:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001066:	d05a      	beq.n	800111e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001068:	f7ff ffc1 	bl	8000fee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800106c:	2300      	movs	r3, #0
 800106e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001070:	6823      	ldr	r3, [r4, #0]
 8001072:	691a      	ldr	r2, [r3, #16]
 8001074:	06d2      	lsls	r2, r2, #27
 8001076:	d510      	bpl.n	800109a <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001078:	68da      	ldr	r2, [r3, #12]
 800107a:	06d0      	lsls	r0, r2, #27
 800107c:	d50d      	bpl.n	800109a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800107e:	f06f 0210 	mvn.w	r2, #16
 8001082:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001084:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001086:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001088:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800108a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800108e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001090:	d04b      	beq.n	800112a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001092:	f7ff ffac 	bl	8000fee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001096:	2300      	movs	r3, #0
 8001098:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	691a      	ldr	r2, [r3, #16]
 800109e:	07d1      	lsls	r1, r2, #31
 80010a0:	d508      	bpl.n	80010b4 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80010a2:	68da      	ldr	r2, [r3, #12]
 80010a4:	07d2      	lsls	r2, r2, #31
 80010a6:	d505      	bpl.n	80010b4 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80010a8:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80010ac:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80010ae:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80010b0:	f000 fad6 	bl	8001660 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80010b4:	6823      	ldr	r3, [r4, #0]
 80010b6:	691a      	ldr	r2, [r3, #16]
 80010b8:	0610      	lsls	r0, r2, #24
 80010ba:	d508      	bpl.n	80010ce <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	0611      	lsls	r1, r2, #24
 80010c0:	d505      	bpl.n	80010ce <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80010c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80010c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80010c8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80010ca:	f000 f8aa 	bl	8001222 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80010ce:	6823      	ldr	r3, [r4, #0]
 80010d0:	691a      	ldr	r2, [r3, #16]
 80010d2:	0652      	lsls	r2, r2, #25
 80010d4:	d508      	bpl.n	80010e8 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	0650      	lsls	r0, r2, #25
 80010da:	d505      	bpl.n	80010e8 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80010dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80010e0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80010e2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80010e4:	f7ff ff85 	bl	8000ff2 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80010e8:	6823      	ldr	r3, [r4, #0]
 80010ea:	691a      	ldr	r2, [r3, #16]
 80010ec:	0691      	lsls	r1, r2, #26
 80010ee:	d522      	bpl.n	8001136 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	0692      	lsls	r2, r2, #26
 80010f4:	d51f      	bpl.n	8001136 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80010f6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80010fa:	4620      	mov	r0, r4
}
 80010fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001100:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001102:	f000 b88d 	b.w	8001220 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001106:	f7ff ff71 	bl	8000fec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800110a:	4620      	mov	r0, r4
 800110c:	f7ff ff70 	bl	8000ff0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001110:	e783      	b.n	800101a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001112:	f7ff ff6b 	bl	8000fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001116:	4620      	mov	r0, r4
 8001118:	f7ff ff6a 	bl	8000ff0 <HAL_TIM_PWM_PulseFinishedCallback>
 800111c:	e792      	b.n	8001044 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800111e:	f7ff ff65 	bl	8000fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001122:	4620      	mov	r0, r4
 8001124:	f7ff ff64 	bl	8000ff0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001128:	e7a0      	b.n	800106c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800112a:	f7ff ff5f 	bl	8000fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800112e:	4620      	mov	r0, r4
 8001130:	f7ff ff5e 	bl	8000ff0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001134:	e7af      	b.n	8001096 <HAL_TIM_IRQHandler+0xa2>
 8001136:	bd10      	pop	{r4, pc}

08001138 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001138:	4a1a      	ldr	r2, [pc, #104]	; (80011a4 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800113a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800113c:	4290      	cmp	r0, r2
 800113e:	d00a      	beq.n	8001156 <TIM_Base_SetConfig+0x1e>
 8001140:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001144:	d007      	beq.n	8001156 <TIM_Base_SetConfig+0x1e>
 8001146:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800114a:	4290      	cmp	r0, r2
 800114c:	d003      	beq.n	8001156 <TIM_Base_SetConfig+0x1e>
 800114e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001152:	4290      	cmp	r0, r2
 8001154:	d115      	bne.n	8001182 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001156:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800115c:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800115e:	4a11      	ldr	r2, [pc, #68]	; (80011a4 <TIM_Base_SetConfig+0x6c>)
 8001160:	4290      	cmp	r0, r2
 8001162:	d00a      	beq.n	800117a <TIM_Base_SetConfig+0x42>
 8001164:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001168:	d007      	beq.n	800117a <TIM_Base_SetConfig+0x42>
 800116a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800116e:	4290      	cmp	r0, r2
 8001170:	d003      	beq.n	800117a <TIM_Base_SetConfig+0x42>
 8001172:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001176:	4290      	cmp	r0, r2
 8001178:	d103      	bne.n	8001182 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800117a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800117c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001180:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001182:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001184:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001188:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800118a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800118c:	688b      	ldr	r3, [r1, #8]
 800118e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001190:	680b      	ldr	r3, [r1, #0]
 8001192:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <TIM_Base_SetConfig+0x6c>)
 8001196:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001198:	bf04      	itt	eq
 800119a:	690b      	ldreq	r3, [r1, #16]
 800119c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800119e:	2301      	movs	r3, #1
 80011a0:	6143      	str	r3, [r0, #20]
 80011a2:	4770      	bx	lr
 80011a4:	40012c00 	.word	0x40012c00

080011a8 <HAL_TIM_Base_Init>:
{
 80011a8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80011aa:	4604      	mov	r4, r0
 80011ac:	b1a0      	cbz	r0, 80011d8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80011ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80011b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011b6:	b91b      	cbnz	r3, 80011c0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80011b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80011bc:	f000 fc48 	bl	8001a50 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80011c0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80011c2:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80011c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80011c8:	1d21      	adds	r1, r4, #4
 80011ca:	f7ff ffb5 	bl	8001138 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80011ce:	2301      	movs	r3, #1
  return HAL_OK;
 80011d0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80011d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80011d6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80011d8:	2001      	movs	r0, #1
}
 80011da:	bd10      	pop	{r4, pc}

080011dc <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80011dc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80011e0:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	f04f 0302 	mov.w	r3, #2
 80011e8:	d018      	beq.n	800121c <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80011ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80011ee:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80011f0:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80011f2:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80011f4:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80011f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80011fa:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	4322      	orrs	r2, r4
 8001200:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001208:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	430a      	orrs	r2, r1
 800120e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001210:	2301      	movs	r3, #1
 8001212:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001216:	2300      	movs	r3, #0
 8001218:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800121c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800121e:	bd10      	pop	{r4, pc}

08001220 <HAL_TIMEx_CommutationCallback>:
 8001220:	4770      	bx	lr

08001222 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001222:	4770      	bx	lr

08001224 <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 8001224:	b510      	push	{r4, lr}
	OneWire_Reset(&OneWire); // Reset the bus
 8001226:	4c07      	ldr	r4, [pc, #28]	; (8001244 <DS18B20_StartAll+0x20>)
 8001228:	4620      	mov	r0, r4
 800122a:	f000 fa53 	bl	80016d4 <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 800122e:	4620      	mov	r0, r4
 8001230:	21cc      	movs	r1, #204	; 0xcc
 8001232:	f000 faa6 	bl	8001782 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 8001236:	4620      	mov	r0, r4
}
 8001238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 800123c:	2144      	movs	r1, #68	; 0x44
 800123e:	f000 baa0 	b.w	8001782 <OneWire_WriteByte>
 8001242:	bf00      	nop
 8001244:	20000044 	.word	0x20000044

08001248 <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 8001248:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if( number >= TempSensorCount) // If read sensor is not availible
 800124a:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <DS18B20_Read+0xac>)
{
 800124c:	460d      	mov	r5, r1
	if( number >= TempSensorCount) // If read sensor is not availible
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4283      	cmp	r3, r0
 8001252:	d802      	bhi.n	800125a <DS18B20_Read+0x12>
		return 0;
 8001254:	2000      	movs	r0, #0
	}
	
	*destination = result;
	
	return 1; //temperature valid
}
 8001256:	b002      	add	sp, #8
 8001258:	bd70      	pop	{r4, r5, r6, pc}
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 800125a:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <DS18B20_Read+0xb0>)
 800125c:	0100      	lsls	r0, r0, #4
 800125e:	18c4      	adds	r4, r0, r3
	return 1;
}

uint8_t DS18B20_Is(uint8_t* ROM)
{
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8001260:	5cc3      	ldrb	r3, [r0, r3]
 8001262:	2b28      	cmp	r3, #40	; 0x28
 8001264:	d1f6      	bne.n	8001254 <DS18B20_Read+0xc>
	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 8001266:	4825      	ldr	r0, [pc, #148]	; (80012fc <DS18B20_Read+0xb4>)
 8001268:	f000 fa70 	bl	800174c <OneWire_ReadBit>
 800126c:	2800      	cmp	r0, #0
 800126e:	d0f1      	beq.n	8001254 <DS18B20_Read+0xc>
	OneWire_Reset(&OneWire); // Reset the bus
 8001270:	4822      	ldr	r0, [pc, #136]	; (80012fc <DS18B20_Read+0xb4>)
 8001272:	f000 fa2f 	bl	80016d4 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8001276:	4621      	mov	r1, r4
 8001278:	4820      	ldr	r0, [pc, #128]	; (80012fc <DS18B20_Read+0xb4>)
 800127a:	f000 fb17 	bl	80018ac <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 800127e:	21be      	movs	r1, #190	; 0xbe
 8001280:	481e      	ldr	r0, [pc, #120]	; (80012fc <DS18B20_Read+0xb4>)
 8001282:	f000 fa7e 	bl	8001782 <OneWire_WriteByte>
 8001286:	2400      	movs	r4, #0
		data[i] = OneWire_ReadByte(&OneWire);
 8001288:	4e1c      	ldr	r6, [pc, #112]	; (80012fc <DS18B20_Read+0xb4>)
 800128a:	4630      	mov	r0, r6
 800128c:	f000 fa89 	bl	80017a2 <OneWire_ReadByte>
 8001290:	f80d 0004 	strb.w	r0, [sp, r4]
 8001294:	3401      	adds	r4, #1
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8001296:	2c05      	cmp	r4, #5
 8001298:	d1f7      	bne.n	800128a <DS18B20_Read+0x42>
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 800129a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800129e:	f89d 4000 	ldrb.w	r4, [sp]
	OneWire_Reset(&OneWire); // Reset the bus
 80012a2:	4816      	ldr	r0, [pc, #88]	; (80012fc <DS18B20_Read+0xb4>)
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 80012a4:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
	OneWire_Reset(&OneWire); // Reset the bus
 80012a8:	f000 fa14 	bl	80016d4 <OneWire_Reset>
	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 80012ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
			result = temperature*(float)DS18B20_STEP_11BIT;
 80012b0:	4620      	mov	r0, r4
	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 80012b2:	f3c3 1341 	ubfx	r3, r3, #5, #2
	switch (resolution) // Chceck the correct value dur to resolution
 80012b6:	3309      	adds	r3, #9
 80012b8:	2b0b      	cmp	r3, #11
 80012ba:	d011      	beq.n	80012e0 <DS18B20_Read+0x98>
 80012bc:	2b0c      	cmp	r3, #12
 80012be:	d014      	beq.n	80012ea <DS18B20_Read+0xa2>
 80012c0:	2b0a      	cmp	r3, #10
 80012c2:	d008      	beq.n	80012d6 <DS18B20_Read+0x8e>
			result = temperature*(float)DS18B20_STEP_9BIT;
 80012c4:	f7fe fffc 	bl	80002c0 <__aeabi_i2f>
 80012c8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
			result = temperature*(float)DS18B20_STEP_12BIT;
 80012cc:	f7ff f84c 	bl	8000368 <__aeabi_fmul>
	*destination = result;
 80012d0:	6028      	str	r0, [r5, #0]
 80012d2:	2001      	movs	r0, #1
 80012d4:	e7bf      	b.n	8001256 <DS18B20_Read+0xe>
			result = temperature*(float)DS18B20_STEP_10BIT;
 80012d6:	f7fe fff3 	bl	80002c0 <__aeabi_i2f>
 80012da:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80012de:	e7f5      	b.n	80012cc <DS18B20_Read+0x84>
			result = temperature*(float)DS18B20_STEP_11BIT;
 80012e0:	f7fe ffee 	bl	80002c0 <__aeabi_i2f>
 80012e4:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80012e8:	e7f0      	b.n	80012cc <DS18B20_Read+0x84>
			result = temperature*(float)DS18B20_STEP_12BIT;
 80012ea:	f7fe ffe9 	bl	80002c0 <__aeabi_i2f>
 80012ee:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80012f2:	e7eb      	b.n	80012cc <DS18B20_Read+0x84>
 80012f4:	20000028 	.word	0x20000028
 80012f8:	20000034 	.word	0x20000034
 80012fc:	20000044 	.word	0x20000044

08001300 <DS18B20_SetResolution>:
{
 8001300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( number >= TempSensorCount)
 8001304:	4b33      	ldr	r3, [pc, #204]	; (80013d4 <DS18B20_SetResolution+0xd4>)
{
 8001306:	460d      	mov	r5, r1
	if( number >= TempSensorCount)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	4283      	cmp	r3, r0
 800130c:	d905      	bls.n	800131a <DS18B20_SetResolution+0x1a>
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 800130e:	4b32      	ldr	r3, [pc, #200]	; (80013d8 <DS18B20_SetResolution+0xd8>)
 8001310:	0100      	lsls	r0, r0, #4
 8001312:	18c6      	adds	r6, r0, r3
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8001314:	5cc3      	ldrb	r3, [r0, r3]
 8001316:	2b28      	cmp	r3, #40	; 0x28
 8001318:	d016      	beq.n	8001348 <DS18B20_SetResolution+0x48>
		return 0;
 800131a:	2000      	movs	r0, #0
 800131c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if (resolution == DS18B20_Resolution_10bits) 
 8001320:	2d0a      	cmp	r5, #10
 8001322:	d104      	bne.n	800132e <DS18B20_SetResolution+0x2e>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001324:	f004 04bf 	and.w	r4, r4, #191	; 0xbf
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001328:	f044 0420 	orr.w	r4, r4, #32
 800132c:	e02d      	b.n	800138a <DS18B20_SetResolution+0x8a>
	else if (resolution == DS18B20_Resolution_11bits)
 800132e:	2d0b      	cmp	r5, #11
 8001330:	d104      	bne.n	800133c <DS18B20_SetResolution+0x3c>
 8001332:	f004 04df 	and.w	r4, r4, #223	; 0xdf
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001336:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 800133a:	e026      	b.n	800138a <DS18B20_SetResolution+0x8a>
	else if (resolution == DS18B20_Resolution_12bits)
 800133c:	2d0c      	cmp	r5, #12
		conf |= 1 << DS18B20_RESOLUTION_R0;
 800133e:	bf04      	itt	eq
 8001340:	f044 0460 	orreq.w	r4, r4, #96	; 0x60
 8001344:	b2e4      	uxtbeq	r4, r4
 8001346:	e020      	b.n	800138a <DS18B20_SetResolution+0x8a>
	OneWire_Reset(&OneWire); // Reset the bus
 8001348:	4824      	ldr	r0, [pc, #144]	; (80013dc <DS18B20_SetResolution+0xdc>)
 800134a:	f000 f9c3 	bl	80016d4 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 800134e:	4631      	mov	r1, r6
 8001350:	4822      	ldr	r0, [pc, #136]	; (80013dc <DS18B20_SetResolution+0xdc>)
 8001352:	f000 faab 	bl	80018ac <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8001356:	21be      	movs	r1, #190	; 0xbe
 8001358:	4820      	ldr	r0, [pc, #128]	; (80013dc <DS18B20_SetResolution+0xdc>)
 800135a:	f000 fa12 	bl	8001782 <OneWire_WriteByte>
	OneWire_ReadByte(&OneWire);
 800135e:	481f      	ldr	r0, [pc, #124]	; (80013dc <DS18B20_SetResolution+0xdc>)
 8001360:	f000 fa1f 	bl	80017a2 <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 8001364:	481d      	ldr	r0, [pc, #116]	; (80013dc <DS18B20_SetResolution+0xdc>)
 8001366:	f000 fa1c 	bl	80017a2 <OneWire_ReadByte>
	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 800136a:	481c      	ldr	r0, [pc, #112]	; (80013dc <DS18B20_SetResolution+0xdc>)
 800136c:	f000 fa19 	bl	80017a2 <OneWire_ReadByte>
 8001370:	4607      	mov	r7, r0
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 8001372:	481a      	ldr	r0, [pc, #104]	; (80013dc <DS18B20_SetResolution+0xdc>)
 8001374:	f000 fa15 	bl	80017a2 <OneWire_ReadByte>
 8001378:	4680      	mov	r8, r0
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 800137a:	4818      	ldr	r0, [pc, #96]	; (80013dc <DS18B20_SetResolution+0xdc>)
 800137c:	f000 fa11 	bl	80017a2 <OneWire_ReadByte>
	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 8001380:	2d09      	cmp	r5, #9
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 8001382:	4604      	mov	r4, r0
	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 8001384:	d1cc      	bne.n	8001320 <DS18B20_SetResolution+0x20>
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001386:	f004 049f 	and.w	r4, r4, #159	; 0x9f
	OneWire_Reset(&OneWire); // Reset the bus
 800138a:	4814      	ldr	r0, [pc, #80]	; (80013dc <DS18B20_SetResolution+0xdc>)
 800138c:	f000 f9a2 	bl	80016d4 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8001390:	4631      	mov	r1, r6
 8001392:	4812      	ldr	r0, [pc, #72]	; (80013dc <DS18B20_SetResolution+0xdc>)
 8001394:	f000 fa8a 	bl	80018ac <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 8001398:	214e      	movs	r1, #78	; 0x4e
 800139a:	4810      	ldr	r0, [pc, #64]	; (80013dc <DS18B20_SetResolution+0xdc>)
 800139c:	f000 f9f1 	bl	8001782 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 80013a0:	4639      	mov	r1, r7
 80013a2:	480e      	ldr	r0, [pc, #56]	; (80013dc <DS18B20_SetResolution+0xdc>)
 80013a4:	f000 f9ed 	bl	8001782 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 80013a8:	4641      	mov	r1, r8
 80013aa:	480c      	ldr	r0, [pc, #48]	; (80013dc <DS18B20_SetResolution+0xdc>)
 80013ac:	f000 f9e9 	bl	8001782 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 80013b0:	4621      	mov	r1, r4
 80013b2:	480a      	ldr	r0, [pc, #40]	; (80013dc <DS18B20_SetResolution+0xdc>)
 80013b4:	f000 f9e5 	bl	8001782 <OneWire_WriteByte>
	OneWire_Reset(&OneWire); // Reset the bus
 80013b8:	4808      	ldr	r0, [pc, #32]	; (80013dc <DS18B20_SetResolution+0xdc>)
 80013ba:	f000 f98b 	bl	80016d4 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80013be:	4631      	mov	r1, r6
 80013c0:	4806      	ldr	r0, [pc, #24]	; (80013dc <DS18B20_SetResolution+0xdc>)
 80013c2:	f000 fa73 	bl	80018ac <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 80013c6:	2148      	movs	r1, #72	; 0x48
 80013c8:	4804      	ldr	r0, [pc, #16]	; (80013dc <DS18B20_SetResolution+0xdc>)
 80013ca:	f000 f9da 	bl	8001782 <OneWire_WriteByte>
	return 1;
 80013ce:	2001      	movs	r0, #1
 80013d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013d4:	20000028 	.word	0x20000028
 80013d8:	20000034 	.word	0x20000034
 80013dc:	20000044 	.word	0x20000044

080013e0 <DS18B20_AllDone>:
	return 0;
}

uint8_t DS18B20_AllDone(void)
{
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 80013e0:	4801      	ldr	r0, [pc, #4]	; (80013e8 <DS18B20_AllDone+0x8>)
 80013e2:	f000 b9b3 	b.w	800174c <OneWire_ReadBit>
 80013e6:	bf00      	nop
 80013e8:	20000044 	.word	0x20000044

080013ec <DS18B20_ReadAll>:
}

void DS18B20_ReadAll(void)
{
 80013ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t i;

	if (DS18B20_AllDone())
 80013f0:	f7ff fff6 	bl	80013e0 <DS18B20_AllDone>
 80013f4:	b1c0      	cbz	r0, 8001428 <DS18B20_ReadAll+0x3c>
 80013f6:	2400      	movs	r4, #0
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
		{
			ds18b20[i].ValidDataFlag = 0;
 80013f8:	46a0      	mov	r8, r4
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 80013fa:	4f0c      	ldr	r7, [pc, #48]	; (800142c <DS18B20_ReadAll+0x40>)
			ds18b20[i].ValidDataFlag = 0;
 80013fc:	4d0c      	ldr	r5, [pc, #48]	; (8001430 <DS18B20_ReadAll+0x44>)
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 80013fe:	783b      	ldrb	r3, [r7, #0]
 8001400:	b2e0      	uxtb	r0, r4
 8001402:	4283      	cmp	r3, r0
 8001404:	d801      	bhi.n	800140a <DS18B20_ReadAll+0x1e>
 8001406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ds18b20[i].ValidDataFlag = 0;
 800140a:	0101      	lsls	r1, r0, #4
 800140c:	186e      	adds	r6, r5, r1
 800140e:	f886 800c 	strb.w	r8, [r6, #12]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8001412:	5c6b      	ldrb	r3, [r5, r1]
 8001414:	2b28      	cmp	r3, #40	; 0x28
 8001416:	d001      	beq.n	800141c <DS18B20_ReadAll+0x30>
 8001418:	3401      	adds	r4, #1
 800141a:	e7f0      	b.n	80013fe <DS18B20_ReadAll+0x12>

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 800141c:	3108      	adds	r1, #8
 800141e:	4429      	add	r1, r5
 8001420:	f7ff ff12 	bl	8001248 <DS18B20_Read>
 8001424:	7330      	strb	r0, [r6, #12]
 8001426:	e7f7      	b.n	8001418 <DS18B20_ReadAll+0x2c>
 8001428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800142c:	20000028 	.word	0x20000028
 8001430:	20000034 	.word	0x20000034

08001434 <DS18B20_GetROM>:
	}
}

void DS18B20_GetROM(uint8_t number, uint8_t* ROM)
{
	if( number >= TempSensorCount)
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <DS18B20_GetROM+0x24>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4298      	cmp	r0, r3
 800143a:	bf28      	it	cs
 800143c:	4618      	movcs	r0, r3
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <DS18B20_GetROM+0x28>)
 8001440:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8001444:	1e4b      	subs	r3, r1, #1
 8001446:	3107      	adds	r1, #7
		number = TempSensorCount;

	uint8_t i;

	for(i = 0; i < 8; i++)
		ROM[i] = ds18b20[number].Address[i];
 8001448:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800144c:	f803 2f01 	strb.w	r2, [r3, #1]!
	for(i = 0; i < 8; i++)
 8001450:	428b      	cmp	r3, r1
 8001452:	d1f9      	bne.n	8001448 <DS18B20_GetROM+0x14>
}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000028 	.word	0x20000028
 800145c:	20000033 	.word	0x20000033

08001460 <DS18B20_Quantity>:
}

uint8_t DS18B20_Quantity(void)
{
	return TempSensorCount;
}
 8001460:	4b01      	ldr	r3, [pc, #4]	; (8001468 <DS18B20_Quantity+0x8>)
 8001462:	7818      	ldrb	r0, [r3, #0]
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000028 	.word	0x20000028

0800146c <DS18B20_GetTemperature>:

uint8_t DS18B20_GetTemperature(uint8_t number, float* destination)
{
	if(!ds18b20[number].ValidDataFlag)
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <DS18B20_GetTemperature+0x14>)
 800146e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8001472:	7b18      	ldrb	r0, [r3, #12]
 8001474:	b110      	cbz	r0, 800147c <DS18B20_GetTemperature+0x10>
		return 0;

	*destination = ds18b20[number].Temperature;
	return 1;
 8001476:	2001      	movs	r0, #1
	*destination = ds18b20[number].Temperature;
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	600b      	str	r3, [r1, #0]

}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000034 	.word	0x20000034

08001484 <DS18B20_Init>:

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 8001484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t next = 0, i = 0, j;
	OneWire_Init(&OneWire, DS18B20_GPIO_Port, DS18B20_Pin); // Init OneWire bus
 8001488:	491a      	ldr	r1, [pc, #104]	; (80014f4 <DS18B20_Init+0x70>)
 800148a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
{
 800148e:	4607      	mov	r7, r0
	OneWire_Init(&OneWire, DS18B20_GPIO_Port, DS18B20_Pin); // Init OneWire bus
 8001490:	4819      	ldr	r0, [pc, #100]	; (80014f8 <DS18B20_Init+0x74>)
 8001492:	f000 fa27 	bl	80018e4 <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 8001496:	4818      	ldr	r0, [pc, #96]	; (80014f8 <DS18B20_Init+0x74>)
 8001498:	f000 f9fe 	bl	8001898 <OneWire_First>
	uint8_t next = 0, i = 0, j;
 800149c:	2100      	movs	r1, #0
 800149e:	4d17      	ldr	r5, [pc, #92]	; (80014fc <DS18B20_Init+0x78>)
	while(next)
	{
		TempSensorCount++;
 80014a0:	4e17      	ldr	r6, [pc, #92]	; (8001500 <DS18B20_Init+0x7c>)
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 80014a2:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80014f8 <DS18B20_Init+0x74>
	while(next)
 80014a6:	b940      	cbnz	r0, 80014ba <DS18B20_Init+0x36>
 80014a8:	460c      	mov	r4, r1
		next = OneWire_Next(&OneWire);
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
			break;
	}

	for(j = 0; j < i; j++)
 80014aa:	2600      	movs	r6, #0
	{
		if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 80014ac:	eb05 1504 	add.w	r5, r5, r4, lsl #4
 80014b0:	b2f0      	uxtb	r0, r6
	for(j = 0; j < i; j++)
 80014b2:	4284      	cmp	r4, r0
 80014b4:	d813      	bhi.n	80014de <DS18B20_Init+0x5a>
 80014b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		TempSensorCount++;
 80014ba:	7833      	ldrb	r3, [r6, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 80014bc:	1c4c      	adds	r4, r1, #1
		TempSensorCount++;
 80014be:	3301      	adds	r3, #1
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 80014c0:	eb05 1101 	add.w	r1, r5, r1, lsl #4
 80014c4:	4640      	mov	r0, r8
		TempSensorCount++;
 80014c6:	7033      	strb	r3, [r6, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 80014c8:	f000 fa00 	bl	80018cc <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 80014cc:	4640      	mov	r0, r8
 80014ce:	f000 f9ea 	bl	80018a6 <OneWire_Next>
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 80014d2:	7833      	ldrb	r3, [r6, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 80014d4:	b2e4      	uxtb	r4, r4
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1e7      	bne.n	80014aa <DS18B20_Init+0x26>
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 80014da:	4621      	mov	r1, r4
 80014dc:	e7e3      	b.n	80014a6 <DS18B20_Init+0x22>
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 80014de:	782b      	ldrb	r3, [r5, #0]
 80014e0:	2b28      	cmp	r3, #40	; 0x28
 80014e2:	d003      	beq.n	80014ec <DS18B20_Init+0x68>
		{
			DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
		}

		DS18B20_StartAll(); // Start conversion on all sensors
 80014e4:	f7ff fe9e 	bl	8001224 <DS18B20_StartAll>
 80014e8:	3601      	adds	r6, #1
 80014ea:	e7e1      	b.n	80014b0 <DS18B20_Init+0x2c>
			DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 80014ec:	4639      	mov	r1, r7
 80014ee:	f7ff ff07 	bl	8001300 <DS18B20_SetResolution>
 80014f2:	e7f7      	b.n	80014e4 <DS18B20_Init+0x60>
 80014f4:	40011000 	.word	0x40011000
 80014f8:	20000044 	.word	0x20000044
 80014fc:	20000034 	.word	0x20000034
 8001500:	20000028 	.word	0x20000028

08001504 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	2210      	movs	r2, #16
{
 8001506:	b570      	push	{r4, r5, r6, lr}
 8001508:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150a:	eb0d 0002 	add.w	r0, sp, r2
 800150e:	2100      	movs	r1, #0
 8001510:	f000 fafc 	bl	8001b0c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001514:	4b1e      	ldr	r3, [pc, #120]	; (8001590 <MX_GPIO_Init+0x8c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|DS18B20_Pin, GPIO_PIN_RESET);
 8001516:	4c1f      	ldr	r4, [pc, #124]	; (8001594 <MX_GPIO_Init+0x90>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001518:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|DS18B20_Pin, GPIO_PIN_RESET);
 800151a:	4620      	mov	r0, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151c:	f042 0210 	orr.w	r2, r2, #16
 8001520:	619a      	str	r2, [r3, #24]
 8001522:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|DS18B20_Pin, GPIO_PIN_RESET);
 8001524:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001528:	f002 0210 	and.w	r2, r2, #16
 800152c:	9201      	str	r2, [sp, #4]
 800152e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001530:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001534:	f042 0220 	orr.w	r2, r2, #32
 8001538:	619a      	str	r2, [r3, #24]
 800153a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2500      	movs	r5, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800153e:	f002 0220 	and.w	r2, r2, #32
 8001542:	9202      	str	r2, [sp, #8]
 8001544:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	699a      	ldr	r2, [r3, #24]
 8001548:	f042 0204 	orr.w	r2, r2, #4
 800154c:	619a      	str	r2, [r3, #24]
 800154e:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|DS18B20_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	9303      	str	r3, [sp, #12]
 8001558:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|DS18B20_Pin, GPIO_PIN_RESET);
 800155a:	f7ff f9fd 	bl	8000958 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 800155e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001562:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001564:	2303      	movs	r3, #3
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001566:	a904      	add	r1, sp, #16
 8001568:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800156a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156c:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001570:	f7ff f90c 	bl	800078c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS18B20_Pin;
 8001574:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001578:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2302      	movs	r3, #2
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 800157c:	a904      	add	r1, sp, #16
 800157e:	4620      	mov	r0, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 8001586:	f7ff f901 	bl	800078c <HAL_GPIO_Init>

}
 800158a:	b008      	add	sp, #32
 800158c:	bd70      	pop	{r4, r5, r6, pc}
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000
 8001594:	40011000 	.word	0x40011000

08001598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001598:	b510      	push	{r4, lr}
 800159a:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159c:	2228      	movs	r2, #40	; 0x28
 800159e:	2100      	movs	r1, #0
 80015a0:	a806      	add	r0, sp, #24
 80015a2:	f000 fab3 	bl	8001b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a6:	2100      	movs	r1, #0
 80015a8:	2214      	movs	r2, #20
 80015aa:	a801      	add	r0, sp, #4
 80015ac:	f000 faae 	bl	8001b0c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b4:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b6:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b8:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ba:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015bc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c0:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015c2:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015c4:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015c6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c8:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ca:	f7ff f9cf 	bl	800096c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ce:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015d8:	4621      	mov	r1, r4
 80015da:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015dc:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015de:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015e0:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e2:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015e4:	f7ff fb8a 	bl	8000cfc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80015e8:	b010      	add	sp, #64	; 0x40
 80015ea:	bd10      	pop	{r4, pc}

080015ec <main>:
{
 80015ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HAL_Init();
 80015ee:	f7ff f82f 	bl	8000650 <HAL_Init>
  SystemClock_Config();
 80015f2:	f7ff ffd1 	bl	8001598 <SystemClock_Config>
  MX_GPIO_Init();
 80015f6:	f7ff ff85 	bl	8001504 <MX_GPIO_Init>
  MX_TIM1_Init();
 80015fa:	f000 f9f3 	bl	80019e4 <MX_TIM1_Init>
  * @retval None
  */
static void MX_NVIC_Init(void)
{
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2005      	movs	r0, #5
 8001602:	4611      	mov	r1, r2
 8001604:	f7ff f86c 	bl	80006e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001608:	2005      	movs	r0, #5
 800160a:	f7ff f89d 	bl	8000748 <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 1);
 800160e:	2201      	movs	r2, #1
 8001610:	2100      	movs	r1, #0
 8001612:	2019      	movs	r0, #25
 8001614:	f7ff f864 	bl	80006e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001618:	2019      	movs	r0, #25
 800161a:	f7ff f895 	bl	8000748 <HAL_NVIC_EnableIRQ>
    DS18B20_Init(DS18B20_Resolution_12bits);
 800161e:	200c      	movs	r0, #12
 8001620:	f7ff ff30 	bl	8001484 <DS18B20_Init>
	 			if(DS18B20_GetTemperature(i, &temperature))
 8001624:	4e0d      	ldr	r6, [pc, #52]	; (800165c <main+0x70>)
	  DS18B20_ReadAll();
 8001626:	f7ff fee1 	bl	80013ec <DS18B20_ReadAll>
	 	for(i = 0; i < DS18B20_Quantity(); i++)
 800162a:	2500      	movs	r5, #0
	       DS18B20_StartAll();
 800162c:	f7ff fdfa 	bl	8001224 <DS18B20_StartAll>
	 	for(i = 0; i < DS18B20_Quantity(); i++)
 8001630:	f7ff ff16 	bl	8001460 <DS18B20_Quantity>
 8001634:	b2ec      	uxtb	r4, r5
 8001636:	4284      	cmp	r4, r0
 8001638:	d304      	bcc.n	8001644 <main+0x58>
	 		HAL_Delay(1000);
 800163a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800163e:	f7ff f82b 	bl	8000698 <HAL_Delay>
  {
 8001642:	e7f0      	b.n	8001626 <main+0x3a>
	 			if(DS18B20_GetTemperature(i, &temperature))
 8001644:	4631      	mov	r1, r6
 8001646:	4620      	mov	r0, r4
 8001648:	f7ff ff10 	bl	800146c <DS18B20_GetTemperature>
 800164c:	b118      	cbz	r0, 8001656 <main+0x6a>
	 				DS18B20_GetROM(i, ROM_tmp);
 800164e:	4669      	mov	r1, sp
 8001650:	4620      	mov	r0, r4
 8001652:	f7ff feef 	bl	8001434 <DS18B20_GetROM>
 8001656:	3501      	adds	r5, #1
 8001658:	e7ea      	b.n	8001630 <main+0x44>
 800165a:	bf00      	nop
 800165c:	20000058 	.word	0x20000058

08001660 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8001660:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001664:	4801      	ldr	r0, [pc, #4]	; (800166c <HAL_TIM_PeriodElapsedCallback+0xc>)
 8001666:	f7ff b97c 	b.w	8000962 <HAL_GPIO_TogglePin>
 800166a:	bf00      	nop
 800166c:	40011000 	.word	0x40011000

08001670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001670:	4770      	bx	lr
	...

08001674 <OneWire_Delay>:
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{

	_DS18B20_TIMER.Instance->CNT = 0;
 8001674:	2200      	movs	r2, #0
 8001676:	4b03      	ldr	r3, [pc, #12]	; (8001684 <OneWire_Delay+0x10>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 800167c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800167e:	4282      	cmp	r2, r0
 8001680:	d9fc      	bls.n	800167c <OneWire_Delay+0x8>
}
 8001682:	4770      	bx	lr
 8001684:	2000009c 	.word	0x2000009c

08001688 <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 8001688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 800168a:	2300      	movs	r3, #0
 800168c:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 800168e:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8001690:	2301      	movs	r3, #1
 8001692:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8001694:	8883      	ldrh	r3, [r0, #4]
 8001696:	a904      	add	r1, sp, #16
 8001698:	f841 3d10 	str.w	r3, [r1, #-16]!
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 800169c:	6800      	ldr	r0, [r0, #0]
 800169e:	f7ff f875 	bl	800078c <HAL_GPIO_Init>
}	
 80016a2:	b005      	add	sp, #20
 80016a4:	f85d fb04 	ldr.w	pc, [sp], #4

080016a8 <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 80016a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 80016aa:	2311      	movs	r3, #17
 80016ac:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 80016ae:	2300      	movs	r3, #0
 80016b0:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 80016b2:	2301      	movs	r3, #1
 80016b4:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 80016b6:	8883      	ldrh	r3, [r0, #4]
 80016b8:	a904      	add	r1, sp, #16
 80016ba:	f841 3d10 	str.w	r3, [r1, #-16]!
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 80016be:	6800      	ldr	r0, [r0, #0]
 80016c0:	f7ff f864 	bl	800078c <HAL_GPIO_Init>
}
 80016c4:	b005      	add	sp, #20
 80016c6:	f85d fb04 	ldr.w	pc, [sp], #4

080016ca <OneWire_OutputLow>:
//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 80016ca:	8883      	ldrh	r3, [r0, #4]
 80016cc:	6802      	ldr	r2, [r0, #0]
 80016ce:	041b      	lsls	r3, r3, #16
 80016d0:	6113      	str	r3, [r2, #16]
 80016d2:	4770      	bx	lr

080016d4 <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 80016d4:	b510      	push	{r4, lr}
 80016d6:	4604      	mov	r4, r0
	uint8_t i;
	
	OneWire_OutputLow(onewire);  // Write bus output low
 80016d8:	f7ff fff7 	bl	80016ca <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 80016dc:	f7ff ffe4 	bl	80016a8 <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 80016e0:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80016e4:	f7ff ffc6 	bl	8001674 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 80016e8:	4620      	mov	r0, r4
 80016ea:	f7ff ffcd 	bl	8001688 <OneWire_BusInputDirection>
	OneWire_Delay(70);
 80016ee:	2046      	movs	r0, #70	; 0x46
 80016f0:	f7ff ffc0 	bl	8001674 <OneWire_Delay>
	
	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 80016f4:	88a1      	ldrh	r1, [r4, #4]
 80016f6:	6820      	ldr	r0, [r4, #0]
 80016f8:	f7ff f928 	bl	800094c <HAL_GPIO_ReadPin>
 80016fc:	4601      	mov	r1, r0
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 80016fe:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8001702:	f7ff ffb7 	bl	8001674 <OneWire_Delay>

	return i;
}
 8001706:	4608      	mov	r0, r1
 8001708:	bd10      	pop	{r4, pc}

0800170a <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 800170a:	b510      	push	{r4, lr}
 800170c:	4604      	mov	r4, r0
	if (bit) // Send '1',
 800170e:	b189      	cbz	r1, 8001734 <OneWire_WriteBit+0x2a>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 8001710:	f7ff ffdb 	bl	80016ca <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8001714:	f7ff ffc8 	bl	80016a8 <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 8001718:	2006      	movs	r0, #6
 800171a:	f7ff ffab 	bl	8001674 <OneWire_Delay>
		
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 800171e:	4620      	mov	r0, r4
 8001720:	f7ff ffb2 	bl	8001688 <OneWire_BusInputDirection>
		
		OneWire_Delay(64);
 8001724:	2040      	movs	r0, #64	; 0x40
		OneWire_BusOutputDirection(onewire);
		OneWire_Delay(60);
		
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		
		OneWire_Delay(10);
 8001726:	f7ff ffa5 	bl	8001674 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus
 800172a:	4620      	mov	r0, r4
	}
}
 800172c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		OneWire_BusInputDirection(onewire); // Release bus
 8001730:	f7ff bfaa 	b.w	8001688 <OneWire_BusInputDirection>
		OneWire_OutputLow(onewire); // Set the bus low
 8001734:	f7ff ffc9 	bl	80016ca <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8001738:	f7ff ffb6 	bl	80016a8 <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 800173c:	203c      	movs	r0, #60	; 0x3c
 800173e:	f7ff ff99 	bl	8001674 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8001742:	4620      	mov	r0, r4
 8001744:	f7ff ffa0 	bl	8001688 <OneWire_BusInputDirection>
		OneWire_Delay(10);
 8001748:	200a      	movs	r0, #10
 800174a:	e7ec      	b.n	8001726 <OneWire_WriteBit+0x1c>

0800174c <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 800174c:	b510      	push	{r4, lr}
 800174e:	4604      	mov	r4, r0
	uint8_t bit = 0; // Default read bit state is low
	
	OneWire_OutputLow(onewire); // Set low to initiate reading
 8001750:	f7ff ffbb 	bl	80016ca <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8001754:	f7ff ffa8 	bl	80016a8 <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 8001758:	2002      	movs	r0, #2
 800175a:	f7ff ff8b 	bl	8001674 <OneWire_Delay>
	
	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 800175e:	4620      	mov	r0, r4
 8001760:	f7ff ff92 	bl	8001688 <OneWire_BusInputDirection>
	OneWire_Delay(10);
 8001764:	200a      	movs	r0, #10
 8001766:	f7ff ff85 	bl	8001674 <OneWire_Delay>
	
	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 800176a:	88a1      	ldrh	r1, [r4, #4]
 800176c:	6820      	ldr	r0, [r4, #0]
 800176e:	f7ff f8ed 	bl	800094c <HAL_GPIO_ReadPin>
 8001772:	4601      	mov	r1, r0
		bit = 1;
	
	OneWire_Delay(50); // Wait for end of read cycle
 8001774:	2032      	movs	r0, #50	; 0x32
 8001776:	f7ff ff7d 	bl	8001674 <OneWire_Delay>

	return bit;
}
 800177a:	1c08      	adds	r0, r1, #0
 800177c:	bf18      	it	ne
 800177e:	2001      	movne	r0, #1
 8001780:	bd10      	pop	{r4, pc}

08001782 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 8001782:	b570      	push	{r4, r5, r6, lr}
 8001784:	4606      	mov	r6, r0
 8001786:	460d      	mov	r5, r1
 8001788:	2408      	movs	r4, #8
	uint8_t i = 8;

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 800178a:	f005 0101 	and.w	r1, r5, #1
 800178e:	4630      	mov	r0, r6
 8001790:	3c01      	subs	r4, #1
 8001792:	f7ff ffba 	bl	800170a <OneWire_WriteBit>
		byte >>= 1;
	} while(--i);
 8001796:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
		byte >>= 1;
 800179a:	ea4f 0555 	mov.w	r5, r5, lsr #1
	} while(--i);
 800179e:	d1f4      	bne.n	800178a <OneWire_WriteByte+0x8>
}
 80017a0:	bd70      	pop	{r4, r5, r6, pc}

080017a2 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 80017a2:	b570      	push	{r4, r5, r6, lr}
 80017a4:	4606      	mov	r6, r0
 80017a6:	2508      	movs	r5, #8
	uint8_t i = 8, byte = 0;
 80017a8:	2400      	movs	r4, #0

	do{
		byte >>= 1;
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 80017aa:	4630      	mov	r0, r6
 80017ac:	f7ff ffce 	bl	800174c <OneWire_ReadBit>
		byte >>= 1;
 80017b0:	0864      	lsrs	r4, r4, #1
 80017b2:	3d01      	subs	r5, #1
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 80017b4:	ea44 14c0 	orr.w	r4, r4, r0, lsl #7
	} while(--i);
 80017b8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 80017bc:	b2e4      	uxtb	r4, r4
	} while(--i);
 80017be:	d1f4      	bne.n	80017aa <OneWire_ReadByte+0x8>
	
	return byte;
}
 80017c0:	4620      	mov	r0, r4
 80017c2:	bd70      	pop	{r4, r5, r6, pc}

080017c4 <OneWire_Search>:
	onewire->LastDeviceFlag = 0;
	onewire->LastFamilyDiscrepancy = 0;
}

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 80017c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	last_zero = 0;
	rom_byte_number = 0;
	rom_byte_mask = 1;
	search_result = 0;

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 80017c8:	7a03      	ldrb	r3, [r0, #8]
{
 80017ca:	4604      	mov	r4, r0
 80017cc:	460d      	mov	r5, r1
	if (!onewire->LastDeviceFlag) // If last device flag is not set
 80017ce:	b91b      	cbnz	r3, 80017d8 <OneWire_Search+0x14>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 80017d0:	f7ff ff80 	bl	80016d4 <OneWire_Reset>
 80017d4:	4681      	mov	r9, r0
 80017d6:	b128      	cbz	r0, 80017e4 <OneWire_Search+0x20>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 80017d8:	2000      	movs	r0, #0
 80017da:	71a0      	strb	r0, [r4, #6]
			onewire->LastDeviceFlag = 0;
 80017dc:	7220      	strb	r0, [r4, #8]
			onewire->LastFamilyDiscrepancy = 0;
 80017de:	71e0      	strb	r0, [r4, #7]
			return 0;
 80017e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	rom_byte_mask = 1;
 80017e4:	2601      	movs	r6, #1
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 80017e6:	4629      	mov	r1, r5
 80017e8:	4620      	mov	r0, r4
 80017ea:	f7ff ffca 	bl	8001782 <OneWire_WriteByte>
	rom_byte_number = 0;
 80017ee:	464f      	mov	r7, r9
	id_bit_number = 1;
 80017f0:	4635      	mov	r5, r6

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 80017f2:	4620      	mov	r0, r4
 80017f4:	f7ff ffaa 	bl	800174c <OneWire_ReadBit>
 80017f8:	4680      	mov	r8, r0
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 80017fa:	4620      	mov	r0, r4
 80017fc:	f7ff ffa6 	bl	800174c <OneWire_ReadBit>

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 8001800:	f1b8 0f01 	cmp.w	r8, #1
 8001804:	d110      	bne.n	8001828 <OneWire_Search+0x64>
 8001806:	2801      	cmp	r0, #1
 8001808:	d12e      	bne.n	8001868 <OneWire_Search+0xa4>
					rom_byte_mask = 1; // Reset the mask - first bit
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 800180a:	2d40      	cmp	r5, #64	; 0x40
 800180c:	d9e4      	bls.n	80017d8 <OneWire_Search+0x14>
		{
			onewire->LastDiscrepancy = last_zero;
 800180e:	f884 9006 	strb.w	r9, [r4, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 8001812:	f1b9 0f00 	cmp.w	r9, #0
 8001816:	d101      	bne.n	800181c <OneWire_Search+0x58>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 8001818:	2301      	movs	r3, #1
 800181a:	7223      	strb	r3, [r4, #8]
			search_result = 1; // Searching successful
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 800181c:	7a63      	ldrb	r3, [r4, #9]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0da      	beq.n	80017d8 <OneWire_Search+0x14>
 8001822:	2001      	movs	r0, #1
		onewire->LastFamilyDiscrepancy = 0;
		search_result = 0;
	}

	return search_result;
}
 8001824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (id_bit != cmp_id_bit)
 8001828:	4580      	cmp	r8, r0
 800182a:	eb04 0307 	add.w	r3, r4, r7
 800182e:	d110      	bne.n	8001852 <OneWire_Search+0x8e>
					if (id_bit_number < onewire->LastDiscrepancy)
 8001830:	79a2      	ldrb	r2, [r4, #6]
 8001832:	4295      	cmp	r5, r2
 8001834:	d212      	bcs.n	800185c <OneWire_Search+0x98>
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8001836:	7a5a      	ldrb	r2, [r3, #9]
 8001838:	4216      	tst	r6, r2
 800183a:	bf14      	ite	ne
 800183c:	f04f 0801 	movne.w	r8, #1
 8001840:	f04f 0800 	moveq.w	r8, #0
					if (search_direction == 0) // If 0 was picked, write it to LastZero
 8001844:	f1b8 0f00 	cmp.w	r8, #0
 8001848:	d10e      	bne.n	8001868 <OneWire_Search+0xa4>
						if (last_zero < 9) // Check for last discrepancy in family
 800184a:	2d08      	cmp	r5, #8
 800184c:	d800      	bhi.n	8001850 <OneWire_Search+0x8c>
							onewire->LastFamilyDiscrepancy = last_zero;
 800184e:	71e5      	strb	r5, [r4, #7]
 8001850:	46a9      	mov	r9, r5
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 8001852:	7a5a      	ldrb	r2, [r3, #9]
 8001854:	ea22 0206 	bic.w	r2, r2, r6
 8001858:	725a      	strb	r2, [r3, #9]
 800185a:	e00b      	b.n	8001874 <OneWire_Search+0xb0>
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 800185c:	bf0c      	ite	eq
 800185e:	f04f 0801 	moveq.w	r8, #1
 8001862:	f04f 0800 	movne.w	r8, #0
 8001866:	e7ed      	b.n	8001844 <OneWire_Search+0x80>
 8001868:	f04f 0801 	mov.w	r8, #1
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 800186c:	19e2      	adds	r2, r4, r7
 800186e:	7a53      	ldrb	r3, [r2, #9]
 8001870:	4333      	orrs	r3, r6
 8001872:	7253      	strb	r3, [r2, #9]
				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 8001874:	4641      	mov	r1, r8
 8001876:	4620      	mov	r0, r4
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 8001878:	0076      	lsls	r6, r6, #1
				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 800187a:	f7ff ff46 	bl	800170a <OneWire_WriteBit>
				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 800187e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
					rom_byte_number++; // Next byte number
 8001882:	bf04      	itt	eq
 8001884:	3701      	addeq	r7, #1
 8001886:	b2ff      	uxtbeq	r7, r7
				id_bit_number++; // Next bit search - increase the id
 8001888:	f105 0501 	add.w	r5, r5, #1
					rom_byte_mask = 1; // Reset the mask - first bit
 800188c:	bf08      	it	eq
 800188e:	2601      	moveq	r6, #1
		} while(rom_byte_number < 8);  // Read 8 bytes
 8001890:	2f07      	cmp	r7, #7
				id_bit_number++; // Next bit search - increase the id
 8001892:	b2ed      	uxtb	r5, r5
		} while(rom_byte_number < 8);  // Read 8 bytes
 8001894:	d9ad      	bls.n	80017f2 <OneWire_Search+0x2e>
 8001896:	e7b8      	b.n	800180a <OneWire_Search+0x46>

08001898 <OneWire_First>:
	onewire->LastDiscrepancy = 0;
 8001898:	2200      	movs	r2, #0
//
uint8_t OneWire_First(OneWire_t* onewire)
{
	OneWire_ResetSearch(onewire);

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 800189a:	21f0      	movs	r1, #240	; 0xf0
	onewire->LastDiscrepancy = 0;
 800189c:	7182      	strb	r2, [r0, #6]
	onewire->LastDeviceFlag = 0;
 800189e:	7202      	strb	r2, [r0, #8]
	onewire->LastFamilyDiscrepancy = 0;
 80018a0:	71c2      	strb	r2, [r0, #7]
	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 80018a2:	f7ff bf8f 	b.w	80017c4 <OneWire_Search>

080018a6 <OneWire_Next>:
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 80018a6:	21f0      	movs	r1, #240	; 0xf0
 80018a8:	f7ff bf8c 	b.w	80017c4 <OneWire_Search>

080018ac <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 80018ac:	b570      	push	{r4, r5, r6, lr}
 80018ae:	460c      	mov	r4, r1
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 80018b0:	2155      	movs	r1, #85	; 0x55
{
 80018b2:	4606      	mov	r6, r0
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 80018b4:	f7ff ff65 	bl	8001782 <OneWire_WriteByte>
 80018b8:	1e65      	subs	r5, r4, #1
 80018ba:	3407      	adds	r4, #7
	
	for (i = 0; i < 8; i++)
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 80018bc:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80018c0:	4630      	mov	r0, r6
 80018c2:	f7ff ff5e 	bl	8001782 <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 80018c6:	42a5      	cmp	r5, r4
 80018c8:	d1f8      	bne.n	80018bc <OneWire_SelectWithPointer+0x10>
	}	
}
 80018ca:	bd70      	pop	{r4, r5, r6, pc}

080018cc <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 80018cc:	f100 0309 	add.w	r3, r0, #9
 80018d0:	3901      	subs	r1, #1
 80018d2:	3011      	adds	r0, #17
	uint8_t i;
	for (i = 0; i < 8; i++) {
		*(firstIndex + i) = onewire->ROM_NO[i];
 80018d4:	f813 2b01 	ldrb.w	r2, [r3], #1
	for (i = 0; i < 8; i++) {
 80018d8:	4283      	cmp	r3, r0
		*(firstIndex + i) = onewire->ROM_NO[i];
 80018da:	f801 2f01 	strb.w	r2, [r1, #1]!
	for (i = 0; i < 8; i++) {
 80018de:	d1f9      	bne.n	80018d4 <OneWire_GetFullROM+0x8>
	}
}
 80018e0:	4770      	bx	lr
	...

080018e4 <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018e4:	b570      	push	{r4, r5, r6, lr}
 80018e6:	4604      	mov	r4, r0
 80018e8:	460e      	mov	r6, r1
 80018ea:	4615      	mov	r5, r2
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 80018ec:	480d      	ldr	r0, [pc, #52]	; (8001924 <OneWire_Init+0x40>)
 80018ee:	f7ff fab7 	bl	8000e60 <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
	onewire->GPIO_Pin = GPIO_Pin;

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 80018f2:	4620      	mov	r0, r4
	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 80018f4:	6026      	str	r6, [r4, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 80018f6:	80a5      	strh	r5, [r4, #4]
	OneWire_BusOutputDirection(onewire);
 80018f8:	f7ff fed6 	bl	80016a8 <OneWire_BusOutputDirection>
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 80018fc:	6823      	ldr	r3, [r4, #0]
 80018fe:	88a2      	ldrh	r2, [r4, #4]
	OneWire_OutputHigh(onewire);
	HAL_Delay(100);
 8001900:	2064      	movs	r0, #100	; 0x64
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 8001902:	611a      	str	r2, [r3, #16]
	HAL_Delay(100);
 8001904:	f7fe fec8 	bl	8000698 <HAL_Delay>
	OneWire_OutputLow(onewire);
 8001908:	4620      	mov	r0, r4
 800190a:	f7ff fede 	bl	80016ca <OneWire_OutputLow>
	HAL_Delay(100);
 800190e:	2064      	movs	r0, #100	; 0x64
 8001910:	f7fe fec2 	bl	8000698 <HAL_Delay>
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 8001914:	6823      	ldr	r3, [r4, #0]
 8001916:	88a2      	ldrh	r2, [r4, #4]
	OneWire_OutputHigh(onewire);
	HAL_Delay(200);
 8001918:	20c8      	movs	r0, #200	; 0xc8
}
 800191a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 800191e:	611a      	str	r2, [r3, #16]
	HAL_Delay(200);
 8001920:	f7fe beba 	b.w	8000698 <HAL_Delay>
 8001924:	2000009c 	.word	0x2000009c

08001928 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001928:	4b10      	ldr	r3, [pc, #64]	; (800196c <HAL_MspInit+0x44>)
{
 800192a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 800192c:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 800192e:	2006      	movs	r0, #6
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001930:	f042 0201 	orr.w	r2, r2, #1
 8001934:	619a      	str	r2, [r3, #24]
 8001936:	699a      	ldr	r2, [r3, #24]
 8001938:	f002 0201 	and.w	r2, r2, #1
 800193c:	9200      	str	r2, [sp, #0]
 800193e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001940:	69da      	ldr	r2, [r3, #28]
 8001942:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001946:	61da      	str	r2, [r3, #28]
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001952:	f7fe feb3 	bl	80006bc <HAL_NVIC_SetPriorityGrouping>

  /* Peripheral interrupt init */

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001956:	4a06      	ldr	r2, [pc, #24]	; (8001970 <HAL_MspInit+0x48>)
 8001958:	6853      	ldr	r3, [r2, #4]
 800195a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800195e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001962:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001964:	b003      	add	sp, #12
 8001966:	f85d fb04 	ldr.w	pc, [sp], #4
 800196a:	bf00      	nop
 800196c:	40021000 	.word	0x40021000
 8001970:	40010000 	.word	0x40010000

08001974 <NMI_Handler>:
 8001974:	4770      	bx	lr

08001976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001976:	e7fe      	b.n	8001976 <HardFault_Handler>

08001978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001978:	e7fe      	b.n	8001978 <MemManage_Handler>

0800197a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197a:	e7fe      	b.n	800197a <BusFault_Handler>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	e7fe      	b.n	800197c <UsageFault_Handler>

0800197e <SVC_Handler>:
 800197e:	4770      	bx	lr

08001980 <DebugMon_Handler>:
 8001980:	4770      	bx	lr

08001982 <PendSV_Handler>:
 8001982:	4770      	bx	lr

08001984 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001984:	f7fe be76 	b.w	8000674 <HAL_IncTick>

08001988 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001988:	4770      	bx	lr
	...

0800198c <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800198c:	4801      	ldr	r0, [pc, #4]	; (8001994 <TIM1_UP_IRQHandler+0x8>)
 800198e:	f7ff bb31 	b.w	8000ff4 <HAL_TIM_IRQHandler>
 8001992:	bf00      	nop
 8001994:	2000009c 	.word	0x2000009c

08001998 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <SystemInit+0x40>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	f042 0201 	orr.w	r2, r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80019a2:	6859      	ldr	r1, [r3, #4]
 80019a4:	4a0d      	ldr	r2, [pc, #52]	; (80019dc <SystemInit+0x44>)
 80019a6:	400a      	ands	r2, r1
 80019a8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80019b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019b4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019bc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80019c4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80019c6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80019ca:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80019cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <SystemInit+0x48>)
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000
 80019dc:	f8ff0000 	.word	0xf8ff0000
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e6:	2210      	movs	r2, #16
 80019e8:	2100      	movs	r1, #0
 80019ea:	a802      	add	r0, sp, #8
 80019ec:	f000 f88e 	bl	8001b0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 71;
 80019f0:	2247      	movs	r2, #71	; 0x47
  htim1.Instance = TIM1;
 80019f2:	4815      	ldr	r0, [pc, #84]	; (8001a48 <MX_TIM1_Init+0x64>)
  htim1.Init.Prescaler = 71;
 80019f4:	4915      	ldr	r1, [pc, #84]	; (8001a4c <MX_TIM1_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f6:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 71;
 80019f8:	e880 0006 	stmia.w	r0, {r1, r2}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65000;
 80019fc:	f64f 52e8 	movw	r2, #65000	; 0xfde8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	9301      	str	r3, [sp, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a04:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65000;
 8001a06:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a08:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a0a:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a0e:	f7ff fbcb 	bl	80011a8 <HAL_TIM_Base_Init>
 8001a12:	b108      	cbz	r0, 8001a18 <MX_TIM1_Init+0x34>
  {
    Error_Handler();
 8001a14:	f7ff fe2c 	bl	8001670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a1c:	a902      	add	r1, sp, #8
 8001a1e:	480a      	ldr	r0, [pc, #40]	; (8001a48 <MX_TIM1_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a20:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a22:	f7ff fa2a 	bl	8000e7a <HAL_TIM_ConfigClockSource>
 8001a26:	b108      	cbz	r0, 8001a2c <MX_TIM1_Init+0x48>
  {
    Error_Handler();
 8001a28:	f7ff fe22 	bl	8001670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2c:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a2e:	4669      	mov	r1, sp
 8001a30:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_TIM1_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a32:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a34:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a36:	f7ff fbd1 	bl	80011dc <HAL_TIMEx_MasterConfigSynchronization>
 8001a3a:	b108      	cbz	r0, 8001a40 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001a3c:	f7ff fe18 	bl	8001670 <Error_Handler>
  }

}
 8001a40:	b007      	add	sp, #28
 8001a42:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a46:	bf00      	nop
 8001a48:	2000009c 	.word	0x2000009c
 8001a4c:	40012c00 	.word	0x40012c00

08001a50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8001a50:	6802      	ldr	r2, [r0, #0]
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <HAL_TIM_Base_MspInit+0x24>)
{
 8001a54:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d10a      	bne.n	8001a70 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a5a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001a5e:	699a      	ldr	r2, [r3, #24]
 8001a60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a64:	619a      	str	r2, [r3, #24]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a6c:	9301      	str	r3, [sp, #4]
 8001a6e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001a70:	b002      	add	sp, #8
 8001a72:	4770      	bx	lr
 8001a74:	40012c00 	.word	0x40012c00

08001a78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a78:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a7a:	e003      	b.n	8001a84 <LoopCopyDataInit>

08001a7c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001a7e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a80:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a82:	3104      	adds	r1, #4

08001a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a84:	480a      	ldr	r0, [pc, #40]	; (8001ab0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a88:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a8a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a8c:	d3f6      	bcc.n	8001a7c <CopyDataInit>
  ldr r2, =_sbss
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001a90:	e002      	b.n	8001a98 <LoopFillZerobss>

08001a92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a94:	f842 3b04 	str.w	r3, [r2], #4

08001a98 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a9a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a9c:	d3f9      	bcc.n	8001a92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a9e:	f7ff ff7b 	bl	8001998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aa2:	f000 f80f 	bl	8001ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aa6:	f7ff fda1 	bl	80015ec <main>
  bx lr
 8001aaa:	4770      	bx	lr
  ldr r3, =_sidata
 8001aac:	08001b5c 	.word	0x08001b5c
  ldr r0, =_sdata
 8001ab0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ab4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001ab8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001abc:	200000dc 	.word	0x200000dc

08001ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ac0:	e7fe      	b.n	8001ac0 <ADC1_2_IRQHandler>
	...

08001ac4 <__libc_init_array>:
 8001ac4:	b570      	push	{r4, r5, r6, lr}
 8001ac6:	2500      	movs	r5, #0
 8001ac8:	4e0c      	ldr	r6, [pc, #48]	; (8001afc <__libc_init_array+0x38>)
 8001aca:	4c0d      	ldr	r4, [pc, #52]	; (8001b00 <__libc_init_array+0x3c>)
 8001acc:	1ba4      	subs	r4, r4, r6
 8001ace:	10a4      	asrs	r4, r4, #2
 8001ad0:	42a5      	cmp	r5, r4
 8001ad2:	d109      	bne.n	8001ae8 <__libc_init_array+0x24>
 8001ad4:	f000 f822 	bl	8001b1c <_init>
 8001ad8:	2500      	movs	r5, #0
 8001ada:	4e0a      	ldr	r6, [pc, #40]	; (8001b04 <__libc_init_array+0x40>)
 8001adc:	4c0a      	ldr	r4, [pc, #40]	; (8001b08 <__libc_init_array+0x44>)
 8001ade:	1ba4      	subs	r4, r4, r6
 8001ae0:	10a4      	asrs	r4, r4, #2
 8001ae2:	42a5      	cmp	r5, r4
 8001ae4:	d105      	bne.n	8001af2 <__libc_init_array+0x2e>
 8001ae6:	bd70      	pop	{r4, r5, r6, pc}
 8001ae8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001aec:	4798      	blx	r3
 8001aee:	3501      	adds	r5, #1
 8001af0:	e7ee      	b.n	8001ad0 <__libc_init_array+0xc>
 8001af2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001af6:	4798      	blx	r3
 8001af8:	3501      	adds	r5, #1
 8001afa:	e7f2      	b.n	8001ae2 <__libc_init_array+0x1e>
 8001afc:	08001b54 	.word	0x08001b54
 8001b00:	08001b54 	.word	0x08001b54
 8001b04:	08001b54 	.word	0x08001b54
 8001b08:	08001b58 	.word	0x08001b58

08001b0c <memset>:
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4402      	add	r2, r0
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d100      	bne.n	8001b16 <memset+0xa>
 8001b14:	4770      	bx	lr
 8001b16:	f803 1b01 	strb.w	r1, [r3], #1
 8001b1a:	e7f9      	b.n	8001b10 <memset+0x4>

08001b1c <_init>:
 8001b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b1e:	bf00      	nop
 8001b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b22:	bc08      	pop	{r3}
 8001b24:	469e      	mov	lr, r3
 8001b26:	4770      	bx	lr

08001b28 <_fini>:
 8001b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b2a:	bf00      	nop
 8001b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b2e:	bc08      	pop	{r3}
 8001b30:	469e      	mov	lr, r3
 8001b32:	4770      	bx	lr
